# vim:set ts=8 sts=4 noet:

package SCM::CSDB::Stats;

use strict;
use warnings;

use base qw/SCM::CSDB::History/;

use Date::Manip	qw/UnixDate/;

our $SQL = {
    get_num_of_files_per_week => q{
	select	f.file_name, r.ref_code_value, c.change_set_name
	from	change_set_file as f, ref_code as r, change_set as c
	where	f.change_set_id in 
		(select ch.change_set_id 
		 from	change_set as ch
		 where  ch.create_user	    != 'registry'			    and
			ch.short_descr	    != 'Change generated by roboscm tool.'  and
			ch.number_of_files  != 0				    and
			ch.create_tsp between datetime(&start&) year to second and
					      datetime(&end&)	year to second)	    and
		r.ref_cd	= f.file_change_type				    and
		c.change_set_id = f.change_set_id
	},
     %$SCM::CSDB::History::SQL,
};

sub getFileStatsPerDay {
    my ($self, $day, %args) = @_;

    my $start = "$day 00:00:00";
    my $end   = "$day 23:59:59";

    my $rows = $self->select_all('get_num_of_files_per_week', { start => $start,
								end   => $end });

    my $day_of_week = day_of_week($day);
    my ($total_files, $total_newch, $elapsed) = (0, 0, 0);
    my %total_filetype = (
	    '.c'    => 0,
	    '.cpp'  => 0,
	    '.f'    => 0,
	    '.gob'  => 0,
	    other   => 0,
    );

    for (@$rows) {
	my ($name, $type, $csid) = @$_;
	$name =~ s/\s+$//;
	$total_files++;
	$total_newch++ if $type eq 'NEW' or $type eq 'UNCHANGED';
	$total_filetype{flag($name)}++;
	$elapsed += $self->elapsed($csid);
    }

    return ($day_of_week, $total_files || 0, $total_newch || 0, \%total_filetype, $elapsed);
}

{
    my %elapsed; 
    sub elapsed {
	my ($self, $csid) = @_;

	return 0 if exists $elapsed{$csid};
       
	my $hist = $self->getChangeSetHistory($csid);
	
	return $elapsed{$csid} = 0
	    if @$hist < 2	    or
	       $hist->[0][1] ne 'S' or
	       $hist->[1][1] !~ /A|N/;

	my $start = UnixDate($hist->[0][0], '%o');
	my $end	  = UnixDate($hist->[1][0], '%o');

	$elapsed{$csid}++;

	return $end - $start;
    }
}

sub flag {
    my $name = shift;

    return $1 if $name =~ /(\.f$|\.c$|\.cpp$|\.gob$)/;
    return 'other';
}

sub day_of_week {
    my $day = shift;
    return UnixDate($day, '%a');
}

1;

=head1 NAME

SCM::CSBD::Stats - SCM stats derived from the CSDB

=head1 SYNOPSIS

=head1 METHODS

=head2 new

=head2 new(dbh => DBI::dbh-object)

(Inherited) Creates a new SCM::CSDB::History instance. If called with no arguments,
creates a new DB connection. If you already have an open database handle lying around
somewhere, use the second version to reuse the connection.

=head1 AUTHOR

Tassilo von Parseval E<lt>tvonparseval@bloomberg.netE<gt>

Alan Grow E<lt>agrow@bloomberg.netE<gt>
