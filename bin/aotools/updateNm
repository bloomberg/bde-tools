#!/usr/bin/ksh

#===========================================================================
# Syntax:  updateNm [-b] [-p] [-t]
# Purpose: create or update the cache of files that are incorporated into
#          the set of Big (-b) or Offline (TSFILES) (-o or -t) tasks.
#===========================================================================

syntax="Syntax: updateNm [-b] [-h] [-p] [-t]"
syntax=$syntax"\n\t-b updates Big tasks. (default)"
syntax=$syntax"\n\t-p updates PORTFILE tasks."
syntax=$syntax"\n\t-t updates TSFILE tasks."
syntax=$syntax"\n\t-h prints this help summary."

sourceDir=/bbsrc/prodbigs/sun

# historically ran from tom's account
# targetBaseDir=~jmacd/ProdTasks
targetBaseDir=/bb/csdata/cache/aotools/ProdTasks

targetBottomDir=bigs

##<<<TODO: Lou's nm is a Sparc executable and so this script should check OS for Solaris
# this should go away - the program will move into the arch bin
# and possibly be renamed in the process
fnmprog=/home/liacopon/bin/fnm

exitcode=0

#--------------------------------------------------------------------------
# Parameter Parsing
#--------------------------------------------------------------------------

while getopts ":bhopt" opt; do
    case $opt in
     b ) 
	sourceDir=/bbsrc/prodbigs/sun
        targetBottomDir=bigs;;
     h ) 
	print ${syntax}
        exit 0;;
     o ) 
	print " ** The -o option is deprecated.  Please use -t or -p"
        print " ** for TSFILES or PORTFILES, respectively."
        exit 1;;
     p ) 
        #print " ** This option must be run from sundev1 only!"
	if [[ "$(uname -n)" != "sundev1" ]]; then
	    exec ssh sundev1 $0 -p
	fi
	sourceDir=/bb/p1/bin
        targetBottomDir=portfiles;;
     t ) 
	sourceDir=/bb/source/t1/bin
        targetBottomDir=tsfiles;;
     * )
	print ${syntax}
	exit 1;;
    esac
done
shift $(($OPTIND - 1))

#--------------------------------------------------------------------------
# Main Working Code (such as it is)
#--------------------------------------------------------------------------

targetDir=$targetBaseDir/$targetBottomDir

[ -d $targetBaseDir ] || { mkdir -p $targetBaseDir; chmod g+ws $targetBaseDir; }
[ -d $targetDir ] || { mkdir -p $targetDir; chmod g+ws $targetDir; }

for i in ${sourceDir}/*.tsk
do
    base=${i##*/}

    echo "=== $base \c"
    if [[ ! -f $targetDir/$base || ! -s $targetDir/$base || $i -nt $targetDir/$base ]]
    then
	    
	    echo "\tdoing"
	    TIMESTAMP_FILE=$targetDir/$base.ts
	    touch -r $i $TIMESTAMP_FILE
		# echo === after touch to ts file:
		# ls -l $targetDir/$base*
	    [[ -f $targetDir/$base.new ]] && rm $targetDir/$base.new
	    $fnmprog $i > $targetDir/$base.new
		# echo === after create of new file:
		# ls -l $targetDir/$base*
	    mv -f $targetDir/$base.new $targetDir/$base
		# echo === after overwrite of tsk file:
		# ls -l $targetDir/$base*
	    touch -r $TIMESTAMP_FILE $targetDir/$base
		# echo === after touch from ts file:
		# ls -l $targetDir/$base*
	    rm -f $TIMESTAMP_FILE

    else
	    echo "\tup to date"
    fi
done

print " "
print "Checking for empty files:"
print " "

ls -l $targetDir | grep ' 0 '

print " "

exit 0
