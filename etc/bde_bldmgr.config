#!/usr/bin/perl # for highlighting

# <MikeV>
# I'd like to propose the following to simplify the build matrix:
#
# We choose a "reference platform".  The reference platform is platform we feel
# has a strongly conforming C++ compiler, and hopefully is also fast  -- We
# will use to various unusual build flavors (safe, cpp11) orthogonally.  Also,
# there are a bunch of flavors in our current nightly build which for exist for
# some reason I don't understand.  Here's my proposed layout.
#
# unix-Linux-x86_64-2.6.18-gcc-4.9.2  # Our reference platform.
#  dbg_exc_mt
#  dbg_exc_mt_64
#  dbg_exc_mt_safe
#  opt_exc_mt
#  opt_exc_mt_64
#  dbg_exc_mt_safe_cpp11
#
# unix-AIX-powerpc-7.1-xlc-11.2       # AIX Production builds opt_exc_mt
#  dbg_exc_mt
#  dbg_exc_mt_64
#  opt_exc_mt
#
# unix-SunOS-sparc-5.10-cc-5.10       # Solaris production builds
#  dbg_exc_mt
#  dbg_exc_mt_64
#  opt_exc_mt
#
# unix-Linux-x86_64-2.6.18-gcc-4.1.2  # Linux production builds
#                                     #   (are we on 4.3.5 now?)
#  dbg_exc_mt
#  dbg_exc_mt_64
#  opt_exc_mt
#
# --------- thicker line -----
#
# unix-Linux-x86_64-2.6.18-gcc-4.3.5  # Soon to be linux production
#  opt_exc_mt
#  opt_exc_mt_64
#
# unix-AIX-powerpc-7.1-xlc-12.2       # Soon to be AIX production
#                                     # (updated from 12.0 20150611)
#  dbg_exc_mt
#  dbg_exc_mt_64
#
# unix-SunOS-sparc-5.10-gcc-4.9.2     # cscheckin warning validation??
#  dbg_exc_mt
#  dbg_exc_mt_64
#
# </MikeV>

# bde_bldmgr.config

my @platforms = (
    # Platform name       MachineType   Uplid        @Ufids
  [ "Linux-4.9.2",        "Linux",      "unix-Linux-x86_64-2.6.18-gcc-4.9.2",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                        dbg_exc_mt_safe
                                                        opt_exc_mt
                                                        opt_exc_mt_64
                                                        dbg_exc_mt_safe_cpp11
                                                       )
                                                     ]
  ],
  [ "xlc-11.2",           "AIX",        "unix-AIX-powerpc-7.1-xlc-11.2",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                        opt_exc_mt
                                                       )
                                                     ]
  ],
  [ "cc-5.12",            "Sun",        "unix-SunOS-sparc-5.10-cc-5.12",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                        opt_exc_mt
                                                        opt_exc_mt_64
                                                       )
                                                     ]
  ],
  [ "cc-5.12.3",          "Sun",        "unix-SunOS-sparc-5.10-cc-5.12.3",
                                                     [
                                                     qw(
                                                        opt_exc_mt
                                                        opt_exc_mt_64
                                                       )
                                                     ]
  ],
  [ "Linux-4.1.2",        "Linux",      "unix-Linux-x86_64-2.6.18-gcc-4.1.2",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                        opt_exc_mt
                                                       )
                                                     ]
  ],
  [ "Linux-4.3.5",        "Linux",      "unix-Linux-x86_64-2.6.18-gcc-4.3.5",
                                                     [
                                                     qw(
                                                        opt_exc_mt
                                                        opt_exc_mt_64
                                                       )
                                                     ]
  ],
  [ "xlc-12.2",           "AIX",        "unix-AIX-powerpc-7.1-xlc-12.2",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                       )
                                                     ]
  ],
  [ "Sun-gcc-4.9.2",      "Sun",        "unix-SunOS-sparc-5.10-gcc-4.9.2",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                       )
                                                     ]
  ],
  [ "mac",                "mac",        "unix-darwin-x86_64-13.2.0-clang-5.1.0",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                        opt_exc_mt_cpp11
                                                        dbg_mt
                                                        dbg_mt_cpp11
                                                       )
                                                     ]
  ],
  [ "Windows-VS2008",     "win",        "windows-Windows_NT-amd64-6.1-cl-15.00",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                        dbg_exc_mt_64
                                                       )
                                                     ]
  ],
  [ "Windows-VS2010",     "win",        "windows-Windows_NT-amd64-6.1-cl-16.00",
                                                     [
                                                     qw(
                                                        opt_exc_mt
                                                        dbg_exc_mt_64
                                                        dbg_exc_mt_safe
                                                       )
                                                     ]
  ],
  [ "Windows-VS2012",     "win",        "windows-Windows_NT-amd64-6.1-cl-17.00",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                       )
                                                     ]
  ],

  [ "Windows-VS2013",     "win",        "windows-Windows_NT-amd64-6.1-cl-18.00",
                                                     [
                                                     qw(
                                                        dbg_exc_mt
                                                       )
                                                     ]
  ],
);

my %platformExtraSettings = (
    # TODO: check if needs compiler instead of uplid for windows
    #   (Seems to be what legacy build config specified...)
    'win' => {
        hosts           => $brmHost,

        do_not_build    => "e_ipc bap a_comdb2 a_cdrdb a_bdema a_bteso xml"
                         . " z_bae zde z_a_bdema a_cdrcache a_iconv",

        jobs            => 1,
        verbose         => 1,
        serial          => 'Y',

        rmtbin          => 'e:\\\\git\\\\bde-tools-[build_type]\\\\bin',
        log_destdir     => 'e:\\\\nightly_logs\\\\[build_type]',
        buildview       => 'e:\\\\nightly_builds\\\\[build_type]',

        cygwinview      => '/e/nightly_builds/[build_type]',
        cygwin_logdir   => '/e/nightly_logs/[build_type]',
        perlbin         => '/c/Perl64/bin',

        slave_script    => '[perlbin]/perl [rmtbin]\\\\bde_bldmgr.slave.pl  ',

        master_logdir   => '/home/bdebuild/bs/nightly-logs/[build_type]',

        bde_path_overrides => '',
        kshrc_check     => '',
        no_clearcase    => 'Y',

        srcdir          => '[buildview]',
        rmtroot         => '[srcdir]',
    },

    'mac' => {
        hosts           => 'bdenydev02',

        do_not_build => "e_ipc bap a_comdb2 a_cdrdb a_bdema a_bteso xml z_bae"
                      . " zde z_a_bdema a_cdrcache a_iconv",

        master_logdir => '/home/bdebuild/bs/nightly-logs/[build_type]',

        rmtbin       => "/Development/bdebuild/bde-tools-[build_type]/bin",
        srcdir       => "/Development/bdebuild/[build_type]",
        log_destdir  => "/Development/bdebuild/logs/[build_type]",
        rmtroot      => '[srcdir]',

        jobs         => 4,

        # Before you even THINK about messing with this command, make sure
        # you've read and understood "FILTER RULES" in
        # http://samba.anu.edu.au/ftp/rsync/rsync.html
        #
        # Note that --rsync-path is specified because /opt/swt/bin/rsync
        # appears to hard-code the remote rsync-path as /opt/swt/bin/rsync,
        # which doesn't work on bdenydev02.
        postbuild_pull_cmd=>
                        q{rsync -rltgDzOm -v }
                      . q{--rsync-path=/usr/bin/rsync }
                      . q{--include='*/' }
                      . q{--include='*.log' }
                      . q{--exclude='**' }
                      . q{bdebuild@bdenydev02:[log_destdir]/ }
                      . qq{/$logDir/ 2>&1 }
                      ,
    },

    "Linux" => {
        do_not_build    => "a_bdema a_cdrdb z_a_bdema",
        verbose         => 1,
    },
);

my %platformHosts = (
    Sun   => "nysbldo1 nysbldo2 nysbldo3 nysbldo4 nysbldo5 nysbldo6"
           . " nysbldo7 nysbldo9 nysbldo10 nysbldo11 nysbldo12",

    AIX   => "nyibldo2 nyibldo3 nyibldo4 nyibldo1",

    Linux => "njlnxbldo1 njlnxbldo2 njlnxbldo3 njlnxbldo4 njlnxbldo5"
           . " njlnxbldo6 nylnxbldo1 nylnxbldo2"
           . " nylnxbldo4",

    mac   => "bdenydev02",

    win   => "brmwnydgenap05",
);

use Storable qw(dclone);

use Data::Dumper;

use FindBin;

use POSIX qw(strftime);

use warnings;

#-----------------------------------------------------------------------

use vars qw(
        $view $path %configured_builds @configured_ufids @default_units
        $enableLogArchive $logArchiveBase
        $enableHtmlOutput $htmlOutputBase $htmlOutputBaseURL
        $resultsBase
        $mailLogPath
        %opts
        $deadline
        $brmHost
           );

$view=undef unless defined $view;
$path=undef unless defined $path;

#-----------------------------------------------------------------------

$enableLogArchive   = 1;
$logArchiveBase     = "/home/bdebuild/public_html/failures/";

$enableHtmlOutput   = 1;
$htmlOutputBase     = "/home/bdebuild/public_html/fail/";
# no hostname, so all links are relative and sundev2-3-4 all work
# as http host
$htmlOutputBaseURL  = "fail/";

$resultsBase        = "/home/bdebuild/public_html/results/";

$mailLogPath        = "/home/bdebuild/bs/mailLogs";

$brmHost            = "brmwnydgenap05";

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%Y",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%m",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%d",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}


#-----------------------------------------------------------------------

@default_units = qw[
    bde bce bte bae xml bsc bas bbe zde
];

@configured_ufids = qw[
    dbg_exc_mt dbg_exc_mt_64
];

#    dbg_exc_mt dbg_mt opt_exc_mt dbg_exc_mt_64 dbg_mt_64 opt_exc_mt_64

#-----------------------------------------------------------------------

sub saveSubhash {
    local $Data::Dumper::Sortkeys = 1;
    my ($hash_r, $fname) = @_;

    open(my $fh, ">", $fname) or die "Can't open $fname, error $!";
    print $fh Dumper($hash_r);
}

sub rotateTargetList {
    my ($targetList, $rotateCount) = @_;

    my @list = split / /,$targetList;

    if ($rotateCount > 0) {
        while($rotateCount--) {
            my $x = shift @list;
            push @list, $x;
        }
    }
    else {
        while($rotateCount++) {
            my $x = pop @list;
            unshift @list, $x;
        }
    }

    # trim result
    my $result = join " ", @list;
    $result=~s/^\s+//;
    $result=~s/\s+$//;

    return $result;
}

sub addTargetRecursively {
    my ($hashRef, $strToAdd) = @_;

    foreach my $key (keys %$hashRef) {
        if (ref $hashRef->{$key} eq "HASH") {
            addTargetRecursively($hashRef->{$key},$strToAdd);
        }

        if ($key eq "targets") {
            my $spacer = "";
            $spacer=" " if exists $hashRef->{$key};

            $hashRef->{$key}.="$spacer$strToAdd";
        }
    }
}

my $extraTargets="";

my $no_64_groups = "a_bdema z_a_bdema";

my @buildTimestamp = localtime(); $buildTimestamp[5]+=1900; $buildTimestamp[4]+=1;
my $buildTimestamp = sprintf("%04d%02d%02d.%02d%02d%02d.%04d", @buildTimestamp[5,4,3,2,1,0], rand(10000));

# Set to 1 to run opt_mt and opt_mt_safe builds every day of the week.
my $forceOptMtBuilds = 1;

my $dayOfWeek=$buildTimestamp[6];

my $isSunday     = ($dayOfWeek == 0);
my $isMonday     = ($dayOfWeek == 1);
my $isTuesday    = ($dayOfWeek == 2);
my $isWednesday  = ($dayOfWeek == 3);
my $isThursday   = ($dayOfWeek == 4);
my $isFriday     = ($dayOfWeek == 5);
my $isSaturday   = ($dayOfWeek == 6);

my $isWeekend = ($isSaturday || $isSunday);

my $toolsPath = "$FindBin::Bin/..";   #$ENV{TOOLSPATH};
my $buildDir  = $ENV{BUILD_DIR};
my $logDir    = $ENV{LOG_DIR};

# Default dev targets - do NOT set in default->{id:dev} or they will overwrite
# other targets.
my $devTargets = # only do "safe" builds on Saturdays to save resources
                 ($isSaturday ? "dbg_exc_mt_safe " : "")
                 ."dbg_exc_mt dbg_exc_mt_64",

my @build_types = qw(
    dev
    nextrel
    oneshot
    bslintdev
);

my @build_phases = qw(
    core
    bb
);

$deadline = "19:00";

#if ($isWeekend) {
#    $deadline = "23:00";
#}

if ($buildTimestamp =~ /20120601/) {
    # Postpone build deadline for June 1, 2012, to force
    # a full rebuild leading up to the 2.13 BDE release.
    $deadline = "23:00";
}

#-----------------------------------------------------------------------


# there are several different "do_not" options:
#     do_not_build:     a list of UORs not to build at all
#     do_not_test:      a list of UORs not to build tests for
#     do_not_run_tests: a list of UORs for which we BUILD tests, but do
#                       not RUN them - this lets us check that TD's
#                       compile and link, even on platforms where they
#                       may have runtime issues.

%configured_builds = (
  default          => {
      no_clearcase => "Y",
      build        => "Y",
      build_desc   => "**set platform name**",
      log_destdir  => "$logDir/",
      rmtbin       => "$toolsPath/bin",
      # DRQS 14887231: added "--nice 10" to renice nightly build processes
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl --nice 10",
      targets      => "@configured_ufids",
      srcdir       => "$buildDir",
      rmtroot      => '[srcdir]',
      serial       => "N",
      jobs         => "6",
      verbose      => 1,
      kshrc_check  => "if [ -e /home/bdebuild/.kshrc ]; then . /home/bdebuild/.kshrc; fi;",
      serial_tests_groups => "e_ipc",
      rsh_cmd      => "ssh -2 -n -o PreferredAuthentications=publickey -o BatchMode=yes ",

      "id:dev"     => {
          build_type   => 'dev',
      },

      "id:bslintdev"     => {
          build_type   => 'bslintdev',
      },

      "id:nextrel" => {
          build_type   => 'nextrel',
      },

      "id:oneshot" => {
          build_type   => 'oneshot',
      },
  },
);

sub cloneRefOrScalar {
    my ($arg) = @_;

    if (ref $arg) {
        return dclone $arg;
    }

    return $arg;
}

sub addToConfiguredBuilds {
    my ($topKey, $hash) = @_;

    unless (exists $configured_builds{$topKey}) {
        $configured_builds{$topKey} = dclone $configured_builds{default};
    }

    foreach my $key (keys %$hash) {
        if ('HASH' eq ref $hash->{$key}) {
            if ('HASH' eq ref $configured_builds{$topKey}{$key}) {
                foreach my $innerKey (keys %{$hash->{$key}}) {
                    $configured_builds{$topKey}{$key}{$innerKey}
                                  = cloneRefOrScalar($hash->{$key}{$innerKey});
                }
            }
            else {
                $configured_builds{$topKey}{$key}
                                             = cloneRefOrScalar($hash->{$key});
            }
        }
        else {
            $configured_builds{$topKey}{$key}
                                             = cloneRefOrScalar($hash->{$key});
        }
    }
}

sub stringListShuffle {
    my @array = split / /, $_[0];

    # http://perlmonks.org/?node_id=1088303
    my( $r, $t );
    $r = $_ + rand( @array - $_ ),
    $t =           $array[ $_ ],
    $array[ $_ ] = $array[ $r ],
    $array[ $r ] = $t
    for 0 .. $#array;

    return join " ", @array;
}

foreach my $platform (@platforms) {
    my ($name, $type, $uplid, $ufids_r) = @$platform;

    foreach my $ufid(@$ufids_r) {
        my $key = "$name-$ufid";

        if (exists $platformExtraSettings{$type}) {
            print "$key: Sourcing from platformExtraSettings for $type\n";
            addToConfiguredBuilds($key, $platformExtraSettings{$type});
        }
        else {
            addToConfiguredBuilds($key, {});
        }

        $configured_builds{$key}{hosts}      =
                                      stringListShuffle($platformHosts{$type});

        $configured_builds{$key}{build_desc} = $key;

        $configured_builds{$key}{uplid}      = $uplid;

        $configured_builds{$key}{targets}    = $ufid;
    }
}






if ($ARGV[0] eq "--test-config") {
    my $filename = "configured_builds.out";
    saveSubhash(\%configured_builds, $filename);
    print "Saved configuration to $filename\n";
    exit;
}

{
    local $Data::Dumper::Sortkeys = 1;

    print "\n<<<<<<BEGIN>>>>>>>>>>> BDE_BLDMGR CONFIG STATE:\n";
    print Dumper(\%configured_builds);
    print "\n<<<<<<<END>>>>>>>>>>>> BDE_BLDMGR CONFIG STATE:\n";
}

1;




