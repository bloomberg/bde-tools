#!/usr/bin/perl -w  # for highlighting
# bde_bldmgr.config

use Storable qw(dclone);

use Data::Dumper;

use FindBin;

use POSIX qw(strftime);

#-----------------------------------------------------------------------

use vars qw(
        $view $path %configured_builds @configured_ufids @default_units
        $enableLogArchive $logArchiveBase
        $enableHtmlOutput $htmlOutputBase $htmlOutputBaseURL
        $resultsBase
        $mailLogPath
        %opts
        $deadline
           );

$view=undef unless defined $view;
$path=undef unless defined $path;

#-----------------------------------------------------------------------

$enableLogArchive   = 1;
$logArchiveBase     = "/home/bdebuild/public_html/failures/";

$enableHtmlOutput   = 1;
$htmlOutputBase     = "/home/bdebuild/public_html/fail/";
# no hostname, so all links are relative and sundev2-3-4 all work
# as http host
$htmlOutputBaseURL  = "fail/";

$resultsBase        = "/home/bdebuild/public_html/results/";

$mailLogPath        = "/home/bdebuild/bs/mailLogs";

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%Y",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%m",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%d",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}


#-----------------------------------------------------------------------

@default_units = qw[
    bde bce bte bae xml bsc bas bbe zde
];

@configured_ufids = qw[
    dbg_exc_mt dbg_exc_mt_64
];
#    dbg_exc_mt dbg_mt opt_exc_mt dbg_exc_mt_64 dbg_mt_64 opt_exc_mt_64

#-----------------------------------------------------------------------

sub saveSubhash {
    local $Data::Dumper::Sortkeys = 1;
    my ($hash_r, $fname) = @_;

    open(my $fh, ">", $fname) or die "Can't open $fname, error $!";
    print $fh Dumper($hash_r);
}

sub rotateTargetList {
    my ($targetList, $rotateCount) = @_;

    my @list = split / /,$targetList;

    if ($rotateCount > 0) {
        while($rotateCount--) {
            my $x = shift @list;
            push @list, $x;
        }
    }
    else {
        while($rotateCount++) {
            my $x = pop @list;
            unshift @list, $x;
        }
    }

    return join " ", @list;
}

sub addTargetRecursively {
    my ($hashRef, $strToAdd) = @_;

    foreach my $key (keys %$hashRef) {
        if (ref $hashRef->{$key} eq "HASH") {
            addTargetRecursively($hashRef->{$key},$strToAdd);
        }

        if ($key eq "targets") {
            $hashRef->{$key}.=" $strToAdd";
        }
    }
}

my $extraTargets="";

my $no_64_groups = "a_bdema a_bascat z_a_bdema";

my @buildTimestamp = localtime(); $buildTimestamp[5]+=1900; $buildTimestamp[4]+=1;
my $buildTimestamp = sprintf("%04d%02d%02d.%02d%02d%02d.%04d", @buildTimestamp[5,4,3,2,1,0], rand(10000));
my $dayOfWeek=$buildTimestamp[6];

my $isSunday     = ($dayOfWeek == 0);
my $isMonday     = ($dayOfWeek == 1);
my $isTuesday    = ($dayOfWeek == 2);
my $isWednesday  = ($dayOfWeek == 3);
my $isThursday   = ($dayOfWeek == 4);
my $isFriday     = ($dayOfWeek == 5);
my $isSaturday   = ($dayOfWeek == 6);

my $isWeekend = ($isSaturday || $isSunday);

my $toolsPath = "$FindBin::Bin/..";   #$ENV{TOOLSPATH};
my $buildDir  = $ENV{BUILD_DIR};
my $logDir    = $ENV{LOG_DIR};

# Default dev targets - do NOT set in default->{id:dev} or they will overwrite
# other targets.
my $devTargets = # only do "safe" builds on Saturdays to save resources
                 ($isSaturday ? "dbg_exc_mt_safe " : "")
                 ."dbg_exc_mt dbg_exc_mt_64",

$deadline = "13:00";

if ($isWeekend) {
    $deadline = "23:00";
}

#-----------------------------------------------------------------------


# there are several different "do_not" options:
#     do_not_build:     a list of UORs not to build at all
#     do_not_test:      a list of UORs not to build tests for
#     do_not_run_tests: a list of UORs for which we BUILD tests, but do
#                       not RUN them - this lets us check that TD's
#                       compile and link, even on platforms where they
#                       may have runtime issues.

%configured_builds = (
  default          => {
      no_clearcase => "Y",
      build_desc   => "**set platform name**",
      log_destdir  => "$logDir/",
      rmtbin       => "$toolsPath/bin",
      # DRQS 14887231: added "--nice 10" to renice nightly build processes
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl --nice 10",
      targets      => "@configured_ufids",
      srcdir       => "$buildDir",
      rmtroot      => '[srcdir]',
      serial       => "N",
      kshrc_check  => "if [ -e /home/bdebuild/.kshrc ]; then . /home/bdebuild/.kshrc; fi;",
      serial_tests_groups => "e_ipc a_basfs a_bassvclt a_baslt a_fsipc a_bassvc a_bascat",
      rsh_cmd      => "ssh -2 -n -o PreferredAuthentications=publickey -o BatchMode=yes ",

      "id:dev"     => {
          build_type   => 'dev',
      },

      "id:nextrel" => {
          build_type   => 'nextrel',
      },

      "id:dev-nextrel-api" => {
          build_type   => 'nextrel-api',
          build         => "N",
      },

  },

  s12 => {
      build_desc   => "Solaris 10/sparc/Studio 12U1",
      build        => "Y",
      hosts        => "nysbldo1 nysbldo2 nysbldo3 nysbldo4",

      # Moving targets to nysbldo1 and nyfbldo2 to adjust load
      "id:nextrel"     => {
          hosts        => "nysbldo3 nysbldo4 nysbldo1 nysbldo2",
      },

      "id:dev-nextrel-api" => {
          build         => "Y",
      },

      "id:dev"      => {
          targets      =>
                           # only do "safe" builds on Saturdays to save
                           # resources
                         ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64",
      },

      # no safe build for non-dev
      targets      => "dbg_exc_mt dbg_exc_mt_64",

      #compiler     => "cc-5.9",
      #uplid        => "unix-SunOS-sparc-5.10-cc-5.9",
      uplid        => "unix-SunOS-sparc-5.10-cc-5.10",
      no_64_groups => $no_64_groups,

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },

  'sgcc-4.6.1' => {
      build_desc   => "Solaris 10/sparc/gcc",
      build        => "Y",
      hosts        => "nysbldo4 nysbldo1 nysbldo2 nysbldo3",
      compiler     => "gcc-4.6.1",
      uplid        => "unix-SunOS-sparc-5.10-gcc-4.6.1",
      no_64_groups => $no_64_groups,
      jobs         => 12,

      targets      => "dbg_exc_mt dbg_exc_mt_64",

      "id:dev-api" => {
          build         => "N",
      },

      "id:nextrel-api" => {
          build         => "N",
      },

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },

  sgcc => {
      build_desc   => "Solaris 10/sparc/gcc",
      build        => "Y",
      hosts        => "nysbldo4 nysbldo1 nysbldo2 nysbldo3",
      compiler     => "gcc",
      uplid        => "unix-SunOS-sparc-5.10-gcc-4.3.2",
      no_64_groups => $no_64_groups,
      jobs         => 12,

      "id:dev"     => {
          targets => $devTargets,
      },

      "id:dev-api" => {
          build         => "N",
      },

      "id:nextrel-api" => {
          build         => "N",
      },

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },

  hp => {
      build_desc   => "HP/HPUX/aCC",
      build        => "Y",
      hosts        => "nyhbldo1",
      uplid        => "unix-HP_UX-ia64-B.11.31-acc-6.2",
      targets      => "dbg_exc_mt dbg_exc_mt_64",

      "id:nextrel"     => {
          hosts        => "nyhbldo1",

          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt opt_exc_mt_64 " : "")
                         . "dbg_exc_mt dbg_exc_mt_64",

          jobs         => 8
      },

      "id:dev"      => {
          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt opt_exc_mt_64 " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe dbg_exc_mt_64_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64",

          jobs         => 8
      },

      test_host    => {
          a_bascat   => "hp1",
          a_basfs    => "hp2",
          a_fsipc    => "hp1",
          a_baslt    => "hp2",
          a_bassvclt => "hp1",
          a_bassvc   => "hp2",
          a_comdb2   => "hp1",
          a_xmf      => "hp2",
          bap        => "hp1",
          e_ipc      => "hp2",
          a_bdema    => "hp1",
          z_a_bdema  => "hp2",
      },

  },

  'i10' => {
      build_desc   => "AIX/PowerPC/xlC10",
      build        => "Y",
      hosts        => "nyibldo2 ibm2 ibm3 ibm4 nyibldo1",

      "id:dev"      => {
          targets      =>
                           # only do "safe" builds on Saturdays to save resources
                           ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64",
      },

      targets      => "dbg_exc_mt dbg_exc_mt_64",

      compiler     => "xlc-10.1",
      no_64_groups => $no_64_groups,

      test_host    => {
          a_bascat   => "ibm2",
          a_basfs    => "ibm2",
          a_fsipc    => "ibm4",
          a_baslt    => "ibm4",
          a_bassvclt => "ibm4",
          a_bassvc   => "ibm2",
          a_comdb2   => "ibm2",
          a_xmf      => "ibm2",
          bap        => "ibm4",
          e_ipc      => "ibm4",
          a_bdema    => "ibm4",
          z_a_bdema  => "ibm2",
      },

      # Moving one of the targets to nyibldo1 instead of o2 to adjust load
      # 20070525
      "id:nextrel"     => {
          hosts        => "nyibldo1 nyibldo2 ibm3 ibm2 ibm4 ibm1",
      },
  },


  # Linux
  'lnx-RHEL4-3.4.3' => {
      build_desc   => "Linux 32/intel/RHEL4/gcc 3.4.3",
      build        => "Y",

      # DRQS 14887231: no need to nice processes for lnx yet
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl",
      do_not_build => "a_fsbaem a_bassvclt a_bdema a_bascat z_bas z_a_bdema",

      targets      =>
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_exc_mt " : "")
                     . "dbg_exc_mt dbg_exc_mt_64"
                     . " opt_exc_mt_64", # temporary - 20100907!

      "id:dev"      => {
          hosts        => "nylnxbldo1",

          test_host    => {
              a_bascat   => "nylxdev1",
              a_basfs    => "nylxdev2",
              a_fsipc    => "nylxdev1",
              a_baslt    => "nylxdev2",
              a_bassvclt => "nylxdev1",
              a_bassvc   => "nylxdev2",
              a_comdb2   => "nylxdev1",
              a_xmf      => "nylxdev2",
              bap        => "nylxdev1",
              e_ipc      => "nylxdev2",
          },

          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },

      "id:dev-nextrel-api" => {
          hosts         => "nylnxbldo2",
          build         => "Y",
          jobs          => 5,
          builds        => 'dbg_exc_mt opt_exc_mt_64',
      },

      "id:dev-api" => {
          # DRQS 26943178: stop building dev-api on linxdev2 - too hard for hardware.
          build         => "N",
      },

      test_host    => {
          a_bascat   => "nylxdev1",
          a_basfs    => "njlxdev1",
          a_fsipc    => "nylxdev1",
          a_baslt    => "njlxdev1",
          a_bassvclt => "nylxdev1",
          a_bassvc   => "njlxdev1",
          a_comdb2   => "nylxdev1",
          a_xmf      => "njlxdev1",
          bap        => "nylxdev1",
          e_ipc      => "njlxdev1",
      },

      hosts        => "nylnxbldo3",
      jobs         => "6",
  },

  'lnx-RHEL5-4.3.5' => {
      build_desc   => "Linux 32/intel/RHEL5/gcc 4.3.5",
      build        => "Y",

      # DRQS 14887231: no need to nice processes for lnx yet
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl",
      do_not_build => "a_fsbaem a_bassvclt a_bdema a_bascat z_bas z_a_bdema",

      targets      =>
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_exc_mt " : "")
                     . "dbg_exc_mt dbg_exc_mt_64"
                     . " opt_exc_mt_64", # temporary - 20100907!

      "id:dev"      => {
          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },

      "id:dev-nextrel-api" => {
          build         => "Y",
          hosts         => "nylxdev2",
          jobs          => 6,
          builds        => 'dbg_exc_mt opt_exc_mt_64',
      },

      "id:dev-api" => {
          jobs       => 4,
      },


      hosts        => "nylxdev1",

      test_host    => {
          a_bascat   => "nylxdev1",
          a_basfs    => "nylxdev2",
          a_fsipc    => "nylxdev1",
          a_baslt    => "nylxdev2",
          a_bassvclt => "nylxdev1",
          a_bassvc   => "nylxdev2",
          a_comdb2   => "nylxdev1",
          a_xmf      => "nylxdev2",
          bap        => "nylxdev1",
          e_ipc      => "nylxdev2",
      },

      jobs         => "10",
  },

);


# Windows

$configured_builds{w32} = {
  kshrc_check  => "",
  build_desc   => "Windows/intel32/VS.NET-2005",
  build        => "N",
  do_not_build => "a_fsbaem e_ipc a_baslt a_xmf bap a_comdb2 a_fsipc a_basfs a_bassvclt a_bdema a_bascat bus z_bus a_bteso apu fde xml z_bas z_bae zde a_bassvc z_a_bdema",

  targets      => "opt_exc_mt dbg_exc_mt",

  serial       => "Y",

  hosts        => "bdenydev01",

  defaultid    => "dev",
  # On Windows, if windows_slave.pl is running, then all the
  # modules it uses can't be overwritten by rsync.  So any
  # infrastructure
  # changes crash the build when the rsync fails.  As a workaround,
  # we will perform the ct update, THEN start the build

  #prebuild_cmd => 'cd [cygwinview]/infrastructure && perl d:\\\\bin\\\\updateonce.pl '.$buildTimestamp,

  no_clearcase => "Y",

  bde_path_overrides => "",

  "id:dev"     => {
      build_type   => "dev",

      targets      =>  # only do "safe" builds on Saturdays to save resources
                       ($isSaturday ? "dbg_exc_mt_safe " : "")
                     . "opt_exc_mt dbg_exc_mt",
  },

  "id:dev-api" => {
      build_type   => "dev",
  },

  "id:nextrel-api" => {
      build_type   => "nextrel",
  },

  log_destdir  => 'e:\\\\nightly_logs\\\\[build_type]',
  cygwin_logdir=> '/e/nightly_logs/[build_type]',
  buildview    => 'e:\\\\nightly_builds\\\\[build_type]',
  cygwinview   => '/e/nightly_builds/[build_type]',
  srcdir       => '[buildview]',
  rmtbin       => 'e:\\\\git\\\\bde-tools\\\\bin',
  rmtroot      => '[srcdir]',
  env_path     => '\'c:/Program Files/Microsoft Visual Studio 8/Common7/Tools/vsvars32.bat\'',
  # DRQS 14887231: nice option is not supported on Windows
  slave_script => 'perl [rmtbin]\\\\bde_bldmgr.slave.pl  -E [env_path] ',
  #slave_script => "perl [rmtbin]\\\\windows_slave.pl",
  compiler     => 'cl-14.00',

  # Before you even THINK about messing with this command, make sure
  # you've read and understood "FILTER RULES" in
  # http://samba.anu.edu.au/ftp/rsync/rsync.html
  postbuild_cmd=>
                  q{rsync --rsh=/usr/bin/ssh -rltgDzOm }
                . q{--include='*/' }
                . q{--include='windows-Windows_*[compiler]/*.log' }
                . q{--include='tools/logs/*.log' }
                . q{--exclude='**' }
                . q{[cygwinview]/ }
                . q{bdebuild@nysbldo2:/}.qq{$buildDir/ }
                . q{;rsync --rsh=/usr/bin/ssh -rltgDzOm }
                . q{--include='*/' }
                . q{--include='*.log' }
                . q{--exclude='**' }
                . q{[cygwin_logdir]/ }
                . q{bdebuild@nysbldo2:/}.qq{$logDir/ }
                ,

};

# eliminated copypasta

# clone optimized studio 12 build from studio 12 build
$configured_builds{s12_opt} = dclone $configured_builds{s12};

$configured_builds{s12_opt}->{build_desc} = "Solaris 10/sparc/Studio 12v4 opt build";

$configured_builds{s12_opt}->{'id:dev-nextrel-api'}->{build}="N";
$configured_builds{s12_opt}->{'id:dev-api'}->{build}="N";

$configured_builds{s12_opt}->{targets}=~s/dbg_/opt_/g;
$configured_builds{s12_opt}->{'id:dev'}->{targets}=~s/dbg_/opt_/g;

$configured_builds{s12_opt}->{hosts} =
             rotateTargetList $configured_builds{s12_opt}->{hosts}, 1;
$configured_builds{s12_opt}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{s12_opt}->{'id:nextrel'}->{hosts}, -1;

# clone optimized xlc10 build from xlc10 build
$configured_builds{i10_opt} = dclone $configured_builds{i10};

$configured_builds{i10_opt}->{build_desc} = "AIX/PowerPC/xlC10 opt builds";

$configured_builds{i10_opt}->{'id:dev-nextrel-api'}->{build}="N";
$configured_builds{i10_opt}->{'id:dev-api'}->{build}="N";

$configured_builds{i10_opt}->{targets}=~s/dbg_/opt_/g;
$configured_builds{i10_opt}->{'id:dev'}->{targets}=~s/dbg_/opt_/g;

$configured_builds{i10_opt}->{hosts} =
             rotateTargetList $configured_builds{i10_opt}->{hosts}, -1;
$configured_builds{i10_opt}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{i10_opt}->{'id:nextrel'}->{hosts}, 1;


# clone safe studio 12 build from optimized studio 12 build
$configured_builds{s12_safe} = dclone $configured_builds{s12_opt};

$configured_builds{s12_safe}->{build_desc} = "Solaris 10/sparc/Studio 12v4 safe build";

$configured_builds{s12_safe}->{'id:dev-nextrel-api'}->{build}="N";

$configured_builds{s12_safe}->{targets}="dbg_exc_mt_safe";
$configured_builds{s12_safe}->{'id:dev'}->{targets}="dbg_exc_mt_safe";

$configured_builds{s12_safe}->{hosts} =
             rotateTargetList $configured_builds{s12_safe}->{hosts}, 2;
$configured_builds{s12_safe}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{s12_safe}->{'id:nextrel'}->{hosts}, -1;


# Add an opt_mt build for s12 and a dbg_exc_mt_cpp11 build for sgcc-4.6.1 on Thursdays.
if ($isSunday || $isThursday) {
  $configured_builds{s12}->{targets}.=" opt_mt_safe";
  $configured_builds{'sgcc-4.6.1'}->{targets}.=" dbg_exc_mt_safe_cpp11";
}

# clone safe xlc10 build from optimized xlc10 build
$configured_builds{i10_safe} = dclone $configured_builds{i10};

$configured_builds{i10_safe}->{build_desc} = "AIX/PowerPC/xlC10 safe builds";

$configured_builds{i10_safe}->{targets}="dbg_exc_mt_safe";
$configured_builds{i10_safe}->{'id:dev'}->{targets}="dbg_exc_mt_safe";

$configured_builds{i10_safe}->{hosts} =
             rotateTargetList $configured_builds{i10_safe}->{hosts}, -1;
$configured_builds{i10_safe}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{i10_safe}->{'id:nextrel'}->{hosts}, 1;

# populate build targets for dev-api builds
$configured_builds{default}->{"id:dev-api"}{targets}  = $configured_builds{default}->{"id:dev"}{targets};

$configured_builds{hp}->{"id:dev-api"}{targets}       = $configured_builds{hp}->{"id:dev"}{targets};
$configured_builds{hp}->{"id:nextrel-api"}{targets}   = $configured_builds{hp}->{"id:nextrel"}{targets};

$configured_builds{s12}->{"id:dev-api"}{targets}      = $configured_builds{s12}->{"id:dev"}{targets};

$configured_builds{i10}->{"id:dev-api"}{targets}      = $configured_builds{i10}->{"id:dev"}{targets};

$configured_builds{i10_safe}->{"id:dev-api"}{targets} = $configured_builds{i10_safe}->{"id:dev"}{targets};

# clone w32_2008 from w32
$configured_builds{w32_2008} = dclone $configured_builds{w32};
$configured_builds{w32_2008}->{build} = 'Y';
$configured_builds{w32_2008}->{build_desc} = 'Windows/intel32/VS.NET-2008';
$configured_builds{w32_2008}->{env_path} = '\'D:/Program Files/Microsoft Visual Studio 9.0/Common7/Tools/vsvars32.bat\'';
$configured_builds{w32_2008}->{compiler} = 'cl-15.00';
$configured_builds{w32_2008}->{"id:dev"}{targets} =~ s/\bdbg_exc_mt\b/dbg_exc_mt_safe/;
$configured_builds{w32_2008}->{"id:dev-api"}{targets} = $configured_builds{w32_2008}->{"id:dev"}{targets};

$configured_builds{w32_2010} = dclone $configured_builds{w32};
$configured_builds{w32_2010}->{build} = 'Y';
$configured_builds{w32_2010}->{build_desc} = 'Windows/intel32/VS.NET-2010';
$configured_builds{w32_2010}->{env_path} = '\'D:/Program Files/Microsoft Visual Studio 10.0/Common7/Tools/vsvars32.bat\'';
$configured_builds{w32_2010}->{compiler} = 'cl-16.00';
# test the new rtd build
$configured_builds{w32_2010}->{targets} .= ' dbg_exc_mt_rtd opt_exc_mt_rtd';
$configured_builds{w32_2010}->{"id:dev"}{targets} .= ' dbg_exc_mt_rtd';

$configured_builds{w32_2010}->{"id:dev"}{targets} .= ' opt_exc_mt_rtd';

if ($isSaturday) {
  $configured_builds{w32_2010}->{"id:dev"}{targets} .= ' dbg_exc_mt_safe_rtd';
}

$configured_builds{w32_2010}->{"id:dev-api"}{targets} = $configured_builds{w32_2010}->{"id:dev"}{targets};

# only build 2010 on weekends to reduce load
$configured_builds{w32_2010}->{build}   = $isWeekend ? "Y" : "N";

$configured_builds{w64a} = dclone $configured_builds{w32_2008};
$configured_builds{w64a}->{build_desc} = 'APINYDEV01 Windows/intel64/VS.NET-2008';
$configured_builds{w64a}->{targets} =
$configured_builds{w64a}->{'id:dev'}->{targets} = 
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_dbg_exc_mt_64_rtd " : "")
                       # only do "safe" builds on Saturdays to save resources
                     . ($isSaturday ? "dbg_exc_mt_64_rtd_safe " : "")
                     . "dbg_exc_mt_64_rtd opt_exc_mt_64_rtd";

$configured_builds{w64a}->{rmtbin}     = 'd:\\\\git\\\\bde-tools\\\\bin',
$configured_builds{w64a}->{log_destdir}= 'd:\\\\nightly_logs\\\\[build_type]';

$configured_builds{w64a}->{'id:dev-api'}->{targets} = $configured_builds{w64a}->{'id:dev'}->{targets};

$configured_builds{w64a}->{hosts} = 'apinydev01';
#$configured_builds{w64a}->{jobs} = 24;

$configured_builds{w64a}->{env_path} = '\'c:/Program Files (x86)/Microsoft Visual Studio 9.0/VC/bin/amd64/vcvarsamd64.bat\'';
$configured_builds{w64a}->{buildview} = 'd:\\\\nightly_builds\\\\[build_type]';
$configured_builds{w64a}->{cygwinview} = '/d/nightly_builds/[build_type]';
$configured_builds{w64a}->{cygwin_logdir} = '/d/nightly_logs/[build_type]';

# Per abasov - 20100729
$configured_builds{w32}->{'id:dev-api'}->{build} = 'N';
$configured_builds{w32}->{'id:nextrel-api'}->{build} = 'N';

if ($ARGV[0] eq "--test-config") {
    my $filename = "configured_builds.out";
    saveSubhash(\%configured_builds, $filename);
    print "Saved configuration to $filename\n";
    exit;
}

1;

#-----------------------------------------------------------------------
