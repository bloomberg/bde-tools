#!/usr/bin/perl -w  # for highlighting
# bde_bldmgr.config

use Storable qw(dclone);

use Data::Dumper;

use FindBin;

use POSIX qw(strftime);

#-----------------------------------------------------------------------

use vars qw(
        $view $path %configured_builds @configured_ufids @default_units
        $enableLogArchive $logArchiveBase
        $enableHtmlOutput $htmlOutputBase $htmlOutputBaseURL
        $resultsBase
        $mailLogPath
        %opts
        $deadline
        $brmHost
           );

$view=undef unless defined $view;
$path=undef unless defined $path;

#-----------------------------------------------------------------------

$enableLogArchive   = 1;
$logArchiveBase     = "/home/bdebuild/public_html/failures/";

$enableHtmlOutput   = 1;
$htmlOutputBase     = "/home/bdebuild/public_html/fail/";
# no hostname, so all links are relative and sundev2-3-4 all work
# as http host
$htmlOutputBaseURL  = "fail/";

$resultsBase        = "/home/bdebuild/public_html/results/";

$mailLogPath        = "/home/bdebuild/bs/mailLogs";

$brmHost            = "brmwnydgenap05";

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%Y",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%m",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}

$mailLogPath.=strftime("/%d",localtime);

if (!-d $mailLogPath) {
    mkdir $mailLogPath;
}


#-----------------------------------------------------------------------

@default_units = qw[
    bde bce bte bae xml bsc bas bbe zde
];

@configured_ufids = qw[
    dbg_exc_mt dbg_exc_mt_64
];

#    dbg_exc_mt dbg_mt opt_exc_mt dbg_exc_mt_64 dbg_mt_64 opt_exc_mt_64

#-----------------------------------------------------------------------

sub saveSubhash {
    local $Data::Dumper::Sortkeys = 1;
    my ($hash_r, $fname) = @_;

    open(my $fh, ">", $fname) or die "Can't open $fname, error $!";
    print $fh Dumper($hash_r);
}

sub rotateTargetList {
    my ($targetList, $rotateCount) = @_;

    my @list = split / /,$targetList;

    if ($rotateCount > 0) {
        while($rotateCount--) {
            my $x = shift @list;
            push @list, $x;
        }
    }
    else {
        while($rotateCount++) {
            my $x = pop @list;
            unshift @list, $x;
        }
    }

    return join " ", @list;
}

sub addTargetRecursively {
    my ($hashRef, $strToAdd) = @_;

    foreach my $key (keys %$hashRef) {
        if (ref $hashRef->{$key} eq "HASH") {
            addTargetRecursively($hashRef->{$key},$strToAdd);
        }

        if ($key eq "targets") {
            $hashRef->{$key}.=" $strToAdd";
        }
    }
}

my $extraTargets="";

my $no_64_groups = "a_bdema a_bascat z_a_bdema";

my @buildTimestamp = localtime(); $buildTimestamp[5]+=1900; $buildTimestamp[4]+=1;
my $buildTimestamp = sprintf("%04d%02d%02d.%02d%02d%02d.%04d", @buildTimestamp[5,4,3,2,1,0], rand(10000));

# Set to 1 to run opt_mt and opt_mt_safe builds every day of the week.
my $forceOptMtBuilds = 1;

my $dayOfWeek=$buildTimestamp[6];

my $isSunday     = ($dayOfWeek == 0);
my $isMonday     = ($dayOfWeek == 1);
my $isTuesday    = ($dayOfWeek == 2);
my $isWednesday  = ($dayOfWeek == 3);
my $isThursday   = ($dayOfWeek == 4);
my $isFriday     = ($dayOfWeek == 5);
my $isSaturday   = ($dayOfWeek == 6);

my $isWeekend = ($isSaturday || $isSunday);

my $toolsPath = "$FindBin::Bin/..";   #$ENV{TOOLSPATH};
my $buildDir  = $ENV{BUILD_DIR};
my $logDir    = $ENV{LOG_DIR};

# Default dev targets - do NOT set in default->{id:dev} or they will overwrite
# other targets.
my $devTargets = # only do "safe" builds on Saturdays to save resources
                 ($isSaturday ? "dbg_exc_mt_safe " : "")
                 ."dbg_exc_mt dbg_exc_mt_64",

my @build_types = qw(
    dev
    nextrel
    bslintdev
);

my @build_phases = qw(
    core
    bb
    bas
    router
);

$deadline = "19:00";

if ($isWeekend) {
    $deadline = "23:00";
}

if ($buildTimestamp =~ /20120601/) {
    # Postpone build deadline for June 1, 2012, to force
    # a full rebuild leading up to the 2.13 BDE release.
    $deadline = "23:00";
}

#-----------------------------------------------------------------------


# there are several different "do_not" options:
#     do_not_build:     a list of UORs not to build at all
#     do_not_test:      a list of UORs not to build tests for
#     do_not_run_tests: a list of UORs for which we BUILD tests, but do
#                       not RUN them - this lets us check that TD's
#                       compile and link, even on platforms where they
#                       may have runtime issues.

%configured_builds = (
  default          => {
      no_clearcase => "Y",
      build_desc   => "**set platform name**",
      log_destdir  => "$logDir/",
      rmtbin       => "$toolsPath/bin",
      # DRQS 14887231: added "--nice 10" to renice nightly build processes
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl --nice 10",
      targets      => "@configured_ufids",
      srcdir       => "$buildDir",
      rmtroot      => '[srcdir]',
      serial       => "N",
      kshrc_check  => "if [ -e /home/bdebuild/.kshrc ]; then . /home/bdebuild/.kshrc; fi;",
      serial_tests_groups => "e_ipc a_basfs a_bassvclt a_baslt a_fsipc a_bassvc a_bascat",
      rsh_cmd      => "ssh -2 -n -o PreferredAuthentications=publickey -o BatchMode=yes ",

      "id:dev"     => {
          build_type   => 'dev',
      },


      "id:bslintdev"     => {
          build_type   => 'bslintdev',
      },

      "id:nextrel" => {
          build_type   => 'nextrel',
      },

  },

  s12 => {
      build_desc   => "Solaris 10/sparc/Studio 12U1",
      build        => "Y",
      hosts        => "nysbldo2 nysbldo3 nysbldo4 nysbldo5",

      "id:nextrel"     => {
          hosts        => "nysbldo3 nysbldo4 nysbldo5 nysbldo2",
      },

      # no safe build for non-dev
      targets      => "dbg_exc_mt dbg_exc_mt_64",

      #compiler     => "cc-5.9",
      #uplid        => "unix-SunOS-sparc-5.10-cc-5.9",
      uplid        => "unix-SunOS-sparc-5.10-cc-5.10",
      no_64_groups => $no_64_groups,

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_cdrdb    => "sundev1",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },


  's12.3' => {
      build_desc   => "Solaris 10/sparc/Studio 12.3",
      build        => "Y",
      hosts        => "nysbldo3 nysbldo4 nysbldo5 nysbldo2",

      "id:nextrel"     => {
          hosts        => "nysbldo4 nysbldo5 nysbldo2 nysbldo3",
      },

      # no safe build for non-dev
      targets      => "dbg_exc_mt dbg_exc_mt_64",

      uplid        => "unix-SunOS-sparc-5.10-cc-5.12",
      no_64_groups => $no_64_groups,

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_cdrdb    => "sundev1",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },

  'sgcc-4.6.1' => {
      build_desc   => "Solaris 10/sparc/gcc",
      build        => "Y",
      hosts        => "nysbldo4 nysbldo5 nysbldo2 nysbldo3",
      compiler     => "gcc-4.6.1",
      uplid        => "unix-SunOS-sparc-5.10-gcc-4.6.1",
      no_64_groups => $no_64_groups,
      jobs         => 12,

      targets      => "dbg_exc_mt dbg_exc_mt_safe dbg_exc_mt_64",

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_cdrdb    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },

  'sgcc-4.7.2-opt' => {
      build_desc   => "Solaris 10/sparc/gcc 4.7.2 warnings check pass (opt)",
      build        => "Y",
      hosts        => "nysbldo7 nysbldo8 nysbldo9 nysbldo10",
      compiler     => "gcc-4.7.2",
      uplid        => "unix-SunOS-sparc-5.10-gcc-4.7.2",
      no_64_groups => $no_64_groups,
      jobs         => 12,

      targets      => (($isMonday||$isWednesday||$isFriday)?"opt_exc_mt":"opt_exc_mt_64"),

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_cdrdb    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },

  'sgcc-4.7.2-opt-safe' => {
      build_desc   => "Solaris 10/sparc/gcc 4.7.2 warnings check pass (opt safe)",
      build        => "Y",
      hosts        => "nysbldo8 nysbldo9 nysbldo10 nysbldo7",
      compiler     => "gcc-4.7.2",
      uplid        => "unix-SunOS-sparc-5.10-gcc-4.7.2",
      no_64_groups => $no_64_groups,
      jobs         => 12,

      targets      => (($isMonday||$isWednesday||$isFriday)?"opt_exc_mt_64_safe":"opt_exc_mt_safe"),

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_cdrdb    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },


  sgcc => {
      build_desc   => "Solaris 10/sparc/gcc",
      build        => "Y",
      hosts        => "nysbldo3 nysbldo4 nysbldo5 nysbldo2",
      compiler     => "gcc",
      uplid        => "unix-SunOS-sparc-5.10-gcc-4.3.2",
      no_64_groups => $no_64_groups,
      jobs         => 12,

      "id:dev"     => {
          targets => $devTargets,
      },

      "id:bslintdev"     => {
          targets => $devTargets,
      },

      test_host    => {
          a_bascat   => "sundev32",
          a_basfs    => "sundev1",
          a_cdrdb    => "sundev1",
          a_fsipc    => "sundev1",
          a_baslt    => "sundev2",
          a_bassvclt => "sundev32",
          a_bassvc   => "sundev32",
          a_comdb2   => "sundev1",
          a_xmf      => "sundev2",
          bap        => "sundev32",
          e_ipc      => "sundev1",
          a_bdema    => "sundev32",
          z_a_bdema  => "sundev1",
      },
  },

  'i11' => {
      build_desc   => "AIX/PowerPC/xlC11.2",
      build        => "Y",
      hosts        => "nyibldo2 ibm2 ibm3 ibm4 nyibldo1",

      "id:dev"      => {
          targets      =>
                           # only do "safe_64" builds on Saturdays to save resources
                           ($isSaturday ? "dbg_exc_mt_safe_64 " : "")
                         . "dbg_exc_mt dbg_exc_mt_64",
      },

      "id:bslintdev"      => {
          targets      =>
                           # only do "safe_64" builds on Saturdays to save resources
                           ($isSaturday ? "dbg_exc_mt_safe_64 " : "")
                         . "dbg_exc_mt dbg_exc_mt_64",
      },

      targets      => "dbg_exc_mt dbg_exc_mt_64",

      compiler     => "xlc-11.2",
      no_64_groups => $no_64_groups,

      test_host    => {
          a_bascat   => "ibm2",
          a_basfs    => "ibm2",
          a_cdrdb    => "ibm2",
          a_fsipc    => "ibm4",
          a_baslt    => "ibm4",
          a_bassvclt => "ibm4",
          a_bassvc   => "ibm2",
          a_comdb2   => "ibm2",
          a_xmf      => "ibm2",
          bap        => "ibm4",
          e_ipc      => "ibm4",
          a_bdema    => "ibm4",
          z_a_bdema  => "ibm2",
      },

      # Moving one of the targets to nyibldo1 instead of o2 to adjust load
      # 20070525
      "id:nextrel"     => {
          hosts        => "nyibldo1 nyibldo2 ibm3 ibm2 ibm4 ibm1",
      },
  },


  # Linux
  'lnx-RHEL5-4.1.2' => {
      build_desc   => "Linux 32/intel/RHEL5/gcc 4.1.2",
      build        => "Y",

      uplid        => "unix-Linux-x86_64-2.6.18-gcc-4.1.2",

      # DRQS 14887231: no need to nice processes for lnx yet
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl",
      do_not_build => "a_fsbaem a_bassvclt a_bdema a_bascat a_cdrdb z_bas z_a_bdema",

      targets      =>
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_exc_mt " : "")
                     . "dbg_exc_mt dbg_exc_mt_64"
                     . " opt_exc_mt_64", # temporary - 20100907!

      "id:dev"      => {
          hosts        => "nylnxbldo1",

          test_host    => {
              a_bascat   => "nylxdev1",
              a_basfs    => "nylxdev2",
              a_fsipc    => "nylxdev1",
              a_baslt    => "nylxdev2",
              a_bassvclt => "nylxdev1",
              a_bassvc   => "nylxdev2",
              a_comdb2   => "nylxdev1",
              a_xmf      => "nylxdev2",
              bap        => "nylxdev1",
              e_ipc      => "nylxdev2",
          },

          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },


      "id:bslintdev"      => {
          hosts        => "njlnxbldo1",

          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },

      test_host    => {
          a_bascat   => "nylxdev1",
          a_basfs    => "njlxdev1",
          a_fsipc    => "nylxdev1",
          a_baslt    => "njlxdev1",
          a_bassvclt => "nylxdev1",
          a_bassvc   => "njlxdev1",
          a_comdb2   => "nylxdev1",
          a_xmf      => "njlxdev1",
          bap        => "nylxdev1",
          e_ipc      => "njlxdev1",
      },

      hosts        => "nylnxbldo1",
      jobs         => "6",
  },

  'lnx-RHEL5-4.3.5' => {
      build_desc   => "Linux 32/intel/RHEL5/gcc 4.3.5",
      build        => "Y",

      compiler     => "gcc-4.3.5",

      # DRQS 14887231: no need to nice processes for lnx yet
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl",
      do_not_build => "a_fsbaem a_bassvclt a_bdema a_bascat a_cdrdb z_bas z_a_bdema",

      targets      =>
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_exc_mt " : "")
                     . "dbg_exc_mt dbg_exc_mt_64"
                     . " opt_exc_mt_64", # temporary - 20100907!

      "id:dev"      => {
          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },

      "id:bslintdev"      => {
          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },

      hosts        => "nylnxbldo1",

      test_host    => {
          a_bascat   => "nylxdev1",
          a_basfs    => "nylxdev2",
          a_fsipc    => "nylxdev1",
          a_baslt    => "nylxdev2",
          a_bassvclt => "nylxdev1",
          a_bassvc   => "nylxdev2",
          a_comdb2   => "nylxdev1",
          a_xmf      => "nylxdev2",
          bap        => "nylxdev1",
          e_ipc      => "nylxdev2",
      },

      jobs         => 6,
  },

  'lnx-clang-gcc-3.1' => {
      build_desc   => "Linux 32/intel/RHEL5/clang 3.1",
      build        => "Y",

      compiler     => "gcc-clang",

      # DRQS 14887231: no need to nice processes for lnx yet
      slave_script => "[rmtbin]/bde_bldmgr.slave.pl",
      do_not_build => "a_fsbaem a_bassvclt a_bdema a_bascat a_cdrdb z_bas z_a_bdema",

      targets      =>
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_exc_mt " : "")
                     . "dbg_exc_mt dbg_exc_mt_64"
                     . " opt_exc_mt_64", # temporary - 20100907!

      "id:dev"      => {
          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },

      "id:bslintdev"      => {
          hosts        => "njlnxbldo2",
          targets      =>
                           # only do optimized builds on weekends to save resources
                           ($isWeekend ? "opt_exc_mt " : "")
                           # only do "safe" builds on Saturdays to save resources
                         . ($isSaturday ? "dbg_exc_mt_safe " : "")
                         . "dbg_exc_mt dbg_exc_mt_64"
                         . " opt_exc_mt_64", # temporary - 20100908!
      },

      hosts        => "nylnxbldo2",

      test_host    => {
          a_bascat   => "nylxdev2",
          a_basfs    => "nylxdev1",
          a_fsipc    => "nylxdev2",
          a_baslt    => "nylxdev1",
          a_bassvclt => "nylxdev2",
          a_bassvc   => "nylxdev1",
          a_comdb2   => "nylxdev2",
          a_xmf      => "nylxdev1",
          bap        => "nylxdev2",
          e_ipc      => "nylxdev1",
      },

      jobs         => 10,
  },

  mac => {
      build_desc   => "Mac OS/X (darwin 13.1.0)",
      build        => "Y",
      hosts        => "bdenydev02",

      rmtbin       => "/Development/bdebuild/bde-tools-[build_type]/bin",
      srcdir       => "/Development/bdebuild/[build_type]",
      log_destdir  => "/Development/bdebuild/logs/[build_type]",
      rmtroot      => '[srcdir]',

      do_not_build => "a_fsbaem e_ipc a_baslt a_xmf bap a_comdb2 a_cdrdb a_fsipc a_basfs a_bassvclt a_bdema a_bascat bus z_bus a_bteso xml z_bas z_bae zde a_bassvc z_a_bdema a_cdrcache a_iconv",

      "id:nextrel" => {
          build         => "N",
      },

      targets      => "dbg_exc_mt dbg_exc_mt_64",

      uplid        => "unix-Darwin-i386-13.1.0-gcc-4.2.1",
      no_64_groups => $no_64_groups,

      jobs         => 8,


      # Before you even THINK about messing with this command, make sure
      # you've read and understood "FILTER RULES" in
      # http://samba.anu.edu.au/ftp/rsync/rsync.html
      #
      # Note that --rsync-path is specified because /opt/swt/bin/rsync
      # appears to hard-code the remote rsync-path as /opt/swt/bin/rsync,
      # which doesn't work on bdenydev02.
      postbuild_pull_cmd=>
                      qq{cd $logDir; rsync -rltgDzOm -v }
                    . q{--rsync-path=/usr/bin/rsync }
                    . q{--include='*/' }
                    . q{--include='[uplid]/*.log' }
                    . q{--include='tools/logs/*.log' }
                    . q{--exclude='**' }
                    . q{bdebuild@bdenydev02:[srcdir]/ }
                    . qq{/$buildDir/ 2>&1 }
                    . q{;rsync -rltgDzOm -v }
                    . q{--rsync-path=/usr/bin/rsync }
                    . q{--include='*/' }
                    . q{--include='*.log' }
                    . q{--exclude='**' }
                    . q{bdebuild@bdenydev02:[log_destdir]/ }
                    . qq{/$logDir/ 2>&1 }
                    ,
  },
);


# Windows

$configured_builds{w32} = {
  kshrc_check  => "",
  build_desc   => "Windows/intel32/VS.NET-2005",
  build        => "N",
  do_not_build => "a_fsbaem e_ipc a_baslt a_xmf bap a_comdb2 a_cdrdb a_fsipc a_basfs a_bassvclt a_bdema a_bascat bus z_bus a_bteso xml z_bas z_bae zde a_bassvc z_a_bdema a_cdrcache a_iconv",

  targets      => "dbg_exc_mt",

  serial       => "Y",

  hosts        => "bdenydev01",

  defaultid    => "dev",
  # On Windows, if windows_slave.pl is running, then all the
  # modules it uses can't be overwritten by rsync.  So any
  # infrastructure
  # changes crash the build when the rsync fails.  As a workaround,
  # we will perform the ct update, THEN start the build

  #prebuild_cmd => 'cd [cygwinview]/infrastructure && perl d:\\\\bin\\\\updateonce.pl '.$buildTimestamp,

  no_clearcase => "Y",

  bde_path_overrides => "",

  "id:dev"     => {
      build_type   => "dev",

      targets      =>  # only do "safe" builds on Saturdays to save resources
                       ($isSaturday ? "dbg_exc_mt_safe " : "")
                     . "dbg_exc_mt",
  },

  "id:bslintdev"     => {
      build_type   => "bslintdev",

      targets      =>  # only do "safe" builds on Saturdays to save resources
                       ($isSaturday ? "dbg_exc_mt_safe " : "")
                     . "dbg_exc_mt",
  },

  log_destdir  => 'e:\\\\nightly_logs\\\\[build_type]',
  cygwin_logdir=> '/e/nightly_logs/[build_type]',
  buildview    => 'e:\\\\nightly_builds\\\\[build_type]',
  cygwinview   => '/e/nightly_builds/[build_type]',
  srcdir       => '[buildview]',
  rmtbin       => 'e:\\\\git\\\\bde-tools-[build_type]\\\\bin',
  rmtroot      => '[srcdir]',
  perlbin      => '/c/perl/bin',
  env_path     => '\'c:/Program Files/Microsoft Visual Studio 8/Common7/Tools/vsvars32.bat\'',
  # DRQS 14887231: nice option is not supported on Windows
  slave_script => '[perlbin]/perl [rmtbin]\\\\bde_bldmgr.slave.pl  -E [env_path] ',
  #slave_script => "perl [rmtbin]\\\\windows_slave.pl",
  compiler     => 'cl-14.00',

  # Before you even THINK about messing with this command, make sure
  # you've read and understood "FILTER RULES" in
  # http://samba.anu.edu.au/ftp/rsync/rsync.html
  postbuild_cmd=>
                  q{rsync --rsh=/usr/bin/ssh -rltgDzOm }
                . q{--include='*/' }
                . q{--include='windows-Windows_*[compiler]/*.log' }
                . q{--include='tools/logs/*.log' }
                . q{--exclude='**' }
                . q{[cygwinview]/ }
                . q{bdebuild@nysbldo2:/}.qq{$buildDir/ }
                . q{;rsync --rsh=/usr/bin/ssh -rltgDzOm }
                . q{--include='*/' }
                . q{--include='*.log' }
                . q{--exclude='**' }
                . q{[cygwin_logdir]/ }
                . q{bdebuild@nysbldo2:/}.qq{$logDir/ }
                ,

};

# eliminated copypasta

# clone optimized studio 12 build from studio 12 build
$configured_builds{s12_opt} = dclone $configured_builds{s12};

$configured_builds{s12_opt}->{build_desc} = "Solaris 10/sparc/Studio 12U1 opt build";

$configured_builds{s12_opt}->{targets}=~s/dbg_/opt_/g;
#$configured_builds{s12_opt}->{'id:dev'}->{targets}=~s/dbg_/opt_/g;
#$configured_builds{s12_opt}->{'id:bslintdev'}->{targets}=~s/dbg_/opt_/g;

$configured_builds{s12_opt}->{hosts} =
             rotateTargetList $configured_builds{s12_opt}->{hosts}, 1;
$configured_builds{s12_opt}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{s12_opt}->{'id:nextrel'}->{hosts}, -1;

# clone xlc12 build from xlc11 build
$configured_builds{i12} = dclone $configured_builds{i11};
$configured_builds{i12}->{build_desc} = "AIX/PowerPC/xlC12 builds";
$configured_builds{i12}->{compiler}   = "xlc-12.0";
$configured_builds{i12}->{hosts} =
             rotateTargetList $configured_builds{i12}->{hosts}, -2;
$configured_builds{i12}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{i12}->{'id:nextrel'}->{hosts}, 2;

# clone optimized xlc11 build from xlc11 build
$configured_builds{i11_opt} = dclone $configured_builds{i11};

$configured_builds{i11_opt}->{build_desc} = "AIX/PowerPC/xlC11.2 opt builds";

$configured_builds{i11_opt}->{targets}=~s/dbg_/opt_/g;
$configured_builds{i11_opt}->{'id:dev'}->{targets}=~s/dbg_/opt_/g;
$configured_builds{i11_opt}->{'id:bslintdev'}->{targets}=~s/dbg_/opt_/g;

$configured_builds{i11_opt}->{hosts} =
             rotateTargetList $configured_builds{i11_opt}->{hosts}, -1;
$configured_builds{i11_opt}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{i11_opt}->{'id:nextrel'}->{hosts}, 1;


# clone safe studio 12 build from optimized studio 12 build
$configured_builds{s12_safe} = dclone $configured_builds{s12_opt};

$configured_builds{s12_safe}->{build_desc} = "Solaris 10/sparc/Studio 12U1 safe build";

$configured_builds{s12_safe}->{targets}="dbg_exc_mt_safe";
$configured_builds{s12_safe}->{'id:dev'}->{targets}="dbg_exc_mt_safe";
$configured_builds{s12_safe}->{'id:bslintdev'}->{targets}="dbg_exc_mt_safe";

$configured_builds{s12_safe}->{targets}             .= " dbg_exc_mt_safe2_safe";
$configured_builds{s12_safe}->{'id:dev'}->{targets} .= " dbg_exc_mt_safe2_safe";
$configured_builds{s12_safe}->{'id:bslintdev'}->{targets} .= " dbg_exc_mt_safe2_safe";

$configured_builds{s12_safe}->{hosts} =
             rotateTargetList $configured_builds{s12_safe}->{hosts}, 2;
$configured_builds{s12_safe}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{s12_safe}->{'id:nextrel'}->{hosts}, -1;


# Add an opt_mt build for s12, and switch to a dbg_exc_mt_cpp11 build for
# sgcc-4.6.1 on Thursdays and Sundays.
if ($forceOptMtBuilds || $isSunday || $isThursday) {
  # per Alisdair, opt_mt/opt_mt_safe for s12.
  $configured_builds{s12}->{'id:dev'}->{targets}    .=" opt_mt_safe";
  $configured_builds{s12}->{'id:bslintdev'}->{targets}    .=" opt_mt_safe";
  $configured_builds{s12}->{'id:nextrel'}->{targets}.=" opt_mt";

  # Note that this is NOT a .= - we mean to run ONLY this build on this platform.
  $configured_builds{'sgcc-4.6.1'}->{targets}="dbg_exc_mt_safe_cpp11";
  $configured_builds{'sgcc-4.6.1'}->{jobs}=20;
}

# clone cpp11 gcc 4.7.2 build from sgcc-4.7.2 opt build
$configured_builds{'sgcc-4.7.2-dbg-cpp11'} = dclone $configured_builds{'sgcc-4.7.2-opt'};
$configured_builds{'sgcc-4.7.2-dbg-cpp11'}->{build_desc}="Solaris 10/sparc/gcc 4.7.2/cpp11/dbg/safe";
$configured_builds{'sgcc-4.7.2-dbg-cpp11'}->{targets}="dbg_exc_mt_safe_cpp11";
$configured_builds{'sgcc-4.7.2-dbg-cpp11'}->{hosts} =
             "nysbldo9 nysbldo10";


$configured_builds{'sgcc-4.7.2-opt-cpp11'} = dclone $configured_builds{'sgcc-4.7.2-dbg-cpp11'};
$configured_builds{'sgcc-4.7.2-opt-cpp11'}->{build_desc}="Solaris 10/sparc/gcc 4.7.2/cpp11/opt/safe";
$configured_builds{'sgcc-4.7.2-opt-cpp11'}->{targets}="opt_exc_mt_safe_cpp11";
$configured_builds{'sgcc-4.7.2-opt-cpp11'}->{hosts} =
             "njsbldo1 njsbldo2";


# clone safe xlc11 build from optimized xlc11 build
$configured_builds{i11_safe} = dclone $configured_builds{i11};

$configured_builds{i11_safe}->{build_desc} = "AIX/PowerPC/xlC11.2 safe builds";

$configured_builds{i11_safe}->{targets}="dbg_exc_mt_safe";
$configured_builds{i11_safe}->{'id:dev'}->{targets}="dbg_exc_mt_safe";
$configured_builds{i11_safe}->{'id:bslintdev'}->{targets}="dbg_exc_mt_safe";

$configured_builds{i11_safe}->{hosts} =
             rotateTargetList $configured_builds{i11_safe}->{hosts}, -1;
$configured_builds{i11_safe}->{'id:nextrel'}->{hosts} =
             rotateTargetList $configured_builds{i11_safe}->{'id:nextrel'}->{hosts}, 1;

# clone w32_2008_dbg from w32
$configured_builds{w32_2008_dbg} = dclone $configured_builds{w32};
$configured_builds{w32_2008_dbg}->{build} = 'N';
$configured_builds{w32_2008_dbg}->{build} = 'Y' if $isSunday || $isTuesday || $isThursday;
$configured_builds{w32_2008_dbg}->{targets} = 'dbg_exc_mt dbg_exc_mt_safe';
$configured_builds{w32_2008_dbg}->{build_desc} = 'Windows/intel32/VS.NET-2008 (debug)';
$configured_builds{w32_2008_dbg}->{env_path} = '\'D:/Program Files/Microsoft Visual Studio 9.0/Common7/Tools/vsvars32.bat\'';
$configured_builds{w32_2008_dbg}->{compiler} = 'cl-15.00';

# clone w32_2008_opt from w32_2008_dbg
$configured_builds{w32_2008_opt} = dclone $configured_builds{w32_2008_dbg};
$configured_builds{w32_2008_opt}->{targets} = 'opt_exc_mt opt_exc_mt_safe';
if ($configured_builds{w32_2008_dbg}->{build} eq 'N') {
    $configured_builds{w32_2008_opt}->{build} = 'Y';
}
else {
    $configured_builds{w32_2008_opt}->{build} = 'N';
}
$configured_builds{w32_2008_opt}->{build_desc} = 'Windows/intel32/VS.NET-2008 (opt)';
$configured_builds{w32_2008_opt}->{"id:dev"}{targets} =~ s/\bdbg_/opt_/g;
$configured_builds{w32_2008_opt}->{"id:bslintdev"}{targets} =~ s/\bdbg_/opt_/g;

$configured_builds{w32_2010} = dclone $configured_builds{w32};
$configured_builds{w32_2010}->{build} = 'Y';
$configured_builds{w32_2010}->{build_desc} = 'Windows/intel32/VS.NET-2010';
$configured_builds{w32_2010}->{env_path} = '\'D:/Program Files/Microsoft Visual Studio 10.0/Common7/Tools/vsvars32.bat\'';
$configured_builds{w32_2010}->{compiler} = 'cl-16.00';

# test the new rtd builds, but only on weekends
if ($isWeekend) {
    $configured_builds{w32_2010}->{targets} .= ' dbg_exc_mt_rtd opt_exc_mt_rtd';
    $configured_builds{w32_2010}->{"id:dev"}{targets} .= ' dbg_exc_mt_rtd';
    $configured_builds{w32_2010}->{"id:bslintdev"}{targets} .= ' dbg_exc_mt_rtd';

    $configured_builds{w32_2010}->{"id:dev"}{targets} .= ' opt_exc_mt_rtd';
    $configured_builds{w32_2010}->{"id:bslintdev"}{targets} .= ' opt_exc_mt_rtd';
}

if ($isSaturday) {
  $configured_builds{w32_2010}->{"id:dev"}{targets} .= ' dbg_exc_mt_safe_rtd';
  $configured_builds{w32_2010}->{"id:bslintdev"}{targets} .= ' dbg_exc_mt_safe_rtd';
}


# only build 2010 on weekends or Tuesdays to reduce load
$configured_builds{w32_2010}->{build}   = ($isWeekend || $isWednesday || $isFriday) ? "Y" : "N";

$configured_builds{w64a_dbg} = dclone $configured_builds{w32_2008_dbg};
$configured_builds{w64a_dbg}->{build_desc} = 'APINYDEV01 Windows/intel64/VS.NET-2008';
$configured_builds{w64a_dbg}->{targets} =
$configured_builds{w64a_dbg}->{'id:dev'}->{targets} = 
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_dbg_exc_mt_64_rtd " : "")
                       # only do "safe" builds on Saturdays to save resources
                     . ($isSaturday ? "dbg_exc_mt_64_rtd_safe " : "")
                     . "dbg_exc_mt_64_rtd opt_exc_mt_64_rtd";

$configured_builds{w64a_dbg}->{'id:bslintdev'}->{targets} = 
                       # only do optimized builds on weekends to save resources
                       ($isWeekend ? "opt_dbg_exc_mt_64_rtd " : "")
                       # only do "safe" builds on Saturdays to save resources
                     . ($isSaturday ? "dbg_exc_mt_64_rtd_safe " : "")
                     . "dbg_exc_mt_64_rtd opt_exc_mt_64_rtd";

$configured_builds{w64a_dbg}->{rmtbin}     = 'd:\\\\git\\\\bde-tools-[build_type]\\\\bin',
$configured_builds{w64a_dbg}->{log_destdir}= 'd:\\\\nightly_logs\\\\[build_type]';

$configured_builds{w64a_dbg}->{hosts} = 'apinydev01';
#$configured_builds{w64a_dbg}->{jobs} = 24;

$configured_builds{w64a_dbg}->{env_path} = '\'c:/Program Files (x86)/Microsoft Visual Studio 9.0/VC/bin/amd64/vcvarsamd64.bat\'';
$configured_builds{w64a_dbg}->{buildview} = 'd:\\\\nightly_builds\\\\[build_type]';
$configured_builds{w64a_dbg}->{cygwinview} = '/d/nightly_builds/[build_type]';
$configured_builds{w64a_dbg}->{cygwin_logdir} = '/d/nightly_logs/[build_type]';

$configured_builds{w64a_dbg}->{perlbin} = '/c/Perl64/bin';

# brmwnydgenap05 build

sub setBrmHostOptions {
    my $buildRef = shift;

    $buildRef->{rmtbin}        = 'e:\\\\git\\\\bde-tools-[build_type]\\\\bin',
    $buildRef->{log_destdir}   = 'e:\\\\nightly_logs\\\\[build_type]';

    $buildRef->{env_path}  =~
        s!D:/Program Files/(.*)/Common7/Tools/vsvars32.bat!C:/Program Files (X86)/$1/Common7/Tools/vsvars32.bat!;

    $buildRef->{hosts}         = $brmHost;

    $buildRef->{jobs}          = 8;

    $buildRef->{buildview}     = 'e:\\\\nightly_builds\\\\[build_type]';
    $buildRef->{cygwinview}    = '/e/nightly_builds/[build_type]';
    $buildRef->{cygwin_logdir} = '/e/nightly_logs/[build_type]';

    $buildRef->{perlbin}       = '/c/Perl64/bin';

    if (!($buildRef->{build_desc}=~s/bdenydev01|apinydev01/$brmHost/ig)) {
        $buildRef->{build_desc}   .= " (on $brmHost)";
    }
}

setBrmHostOptions($configured_builds{w32});
setBrmHostOptions($configured_builds{w32_2008_dbg});
setBrmHostOptions($configured_builds{w32_2008_opt});

setBrmHostOptions($configured_builds{w32_2010});

$configured_builds{w64brm_dbg} = dclone $configured_builds{w64a_dbg};

setBrmHostOptions($configured_builds{w64brm_dbg});

$configured_builds{w64brm_dbg}->{build_desc} =
                                  'brmwnydgenap05 Windows/intel64/VS.NET-2010';
$configured_builds{w64brm_dbg}->{env_path}   =
             '\'c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/bin/'
           . 'x86_amd64/vcvarsx86_amd64.bat\'';

$configured_builds{w64brm_dbg}->{build}      = "Y";

$configured_builds{w64a_dbg}->{build}        = "N";

$configure_builds{w32_2013_dbg} = dclone $configured_builds{w32_2008_dbg};
$configure_builds{w32_2013_dbg}->{build_desc} =
                                  'brmwnydgenap05 Windows/intel/VS-2013';
$configured_builds{w32_2013_dbg}->{env_path}   =
             '\'C:/Program Files (x86)/Microsoft Visual Studio 12.0/'
           . 'Common7/Tools/VsDevCmd.bat\'';

$configured_builds{w32_2013_dbg}->{targets}    = 'dbg_exc_mt';

$configured_builds{w32_2013_dbg}->{build}      = "Y";


foreach my $key (sort keys %configured_builds) {
    my $hash_r = $configured_builds{$key};

    foreach my $type(@build_types) {
        if (exists $hash_r->{"id:$type"}) {
            foreach my $phase(@build_phases) {
                if (!exists $hash_r->{"id:$type-$phase"}) {
                    $hash_r->{"id:$type-$phase"}=$hash_r->{"id:$type"};
                }
            }
        }
    }
}

if ($ARGV[0] eq "--test-config") {
    my $filename = "configured_builds.out";
    saveSubhash(\%configured_builds, $filename);
    print "Saved configuration to $filename\n";
    exit;
}

{
    local $Data::Dumper::Sortkeys = 1;

    print "\n<<<<<<BEGIN>>>>>>>>>>> BDE_BLDMGR CONFIG STATE:\n";
    print Dumper(\%configured_builds);
    print "\n<<<<<<<END>>>>>>>>>>>> BDE_BLDMGR CONFIG STATE:\n";
}
1;

#-----------------------------------------------------------------------
