[% PROCESS svc_util.t -%]
// [% pkg %]_buildopts.h   -*-C++-*-
#ifndef INCLUDED_[% PKG %]_BUILDOPTS
#define INCLUDED_[% PKG %]_BUILDOPTS

#ifndef INCLUDED_BDES_IDENT
#include <bdes_ident.h>
#endif
BDES_IDENT_RCSID([% pkg %]_buildopts_h,"\$Id\$ \$CSID\$ \$CCId\$")
BDES_IDENT_PRAGMA_ONCE

//@PURPOSE: Provide a namespace for core framework class type aliases
//
//@CLASSES:
// [% namespace %]::BuildOpts: namespace for core framework class type aliases
//
//@AUTHOR: [% svc.author %]
//
//@DESCRIPTION: This component provides a namespace for type aliases for core
// framework classes selected according to various compiler macros.  These
// macros dictate how a BAS service should be deployed:
//..
//  BAS_NOBBENV - non-Bloomberg environment aware service
[% UNLESS opts.noSchema -%]
//
//  BAS_AGGREGATE_ROUTER - deploy as an in-process service
[% END -%]
//..
// By default, services are aware of the Bloomberg environment, meaning that
// they can communicate via FastSend, and can attach to common areas and call
// various legacy functions such as comdb[2] accessors.  Defining the
// BAS_NOBBENV compiler flag results in a service which can do none of these
// things, and communicates only via TCP/IP.
//
[% UNLESS opts.noSchema -%]
// Baslets, or in-process services, are optimized for size by translating
// driectly between generated types and 'bcem_Aggregate'.  Hence, baslets do
// not support any wire-format encodings (XML, BER, BDEX, etc).
//
[% END -%]
//@USAGE EXAMPLES
// The following examples illustrate how to choose build options by setting
// compiler flags, assuming the bas_codegen.pl generated plink makefile.
//
// The following command builds a non-Bloomberg environment aware service
//..
//  $ BAS_NOBBENV=yes plink service.mk
//..
[% UNLESS opts.noSchema -%]
//
// The following command builds an in-process service (library)
//..
//  $ BAS_AGGREGATE_ROUTER=yes plink libs_service.mk
//..
[% END -%]

#ifndef INCLUDED_[% PKG %]_VERSION
#include <[% pkg %]_version.h>
#endif

[% UNLESS opts.noSchema -%]
#ifdef BAS_AGGREGATE_ROUTER
// Core BAS Framework (Baslet)
#ifndef INCLUDED_BASSVC_AGGREGATEREQUESTCONTEXT
#include <bassvc_aggregaterequestcontext.h>
#endif
#ifndef INCLUDED_BASSVC_AGGREGATEREQUESTROUTER
#include <bassvc_aggregaterequestrouter.h>
#endif
#ifndef INCLUDED_BASSVC_AGGREGATEREQUESTROUTERIMP
#include <bassvc_aggregaterequestrouterimp.h>
#endif
#ifndef INCLUDED_BCEM_AGGREGATE
#include <bcem_aggregate.h>
#endif
#else
[% END -%]
// Core BAS Framework (Offline)
#ifndef INCLUDED_BASSVC_REQUESTCONTEXT
#include <bassvc_requestcontext.h>
#endif
#ifndef INCLUDED_BASSVC_REQUESTROUTER
#include <bassvc_requestrouter.h>
#endif
#ifndef INCLUDED_BASSVC_REQUESTROUTERIMP
#include <bassvc_requestrouterimp.h>
#endif
#ifndef INCLUDED_BCEMA_BLOB
#include <bcema_blob.h>
#endif
[% UNLESS opts.noSchema -%]
#endif
[% END -%]

namespace BloombergLP {

[% UNLESS opts.noSchema -%]
namespace [% msgpkg %] { class [% RequestType %]; }
[% UNLESS pkg == msgpkg -%]

[% END -%]
[% END -%]
namespace [% namespace %] {

                              // ================
                              // struct BuildOpts
                              // ================

struct BuildOpts {
    // This class provides a namespace for type aliases selected according to
    // various compiler macros.

[% UNLESS opts.noSchema -%]
#ifdef BAS_AGGREGATE_ROUTER
    // Core BAS Framework (Baslet)
    typedef bassvc::AggregateRequestContext            RequestContext;
    typedef bassvc::AggregateRequestRouter             RequestRouter;
    typedef bassvc::AggregateRequestRouterImp<[% MSGNS %][% -%]
                                              [%- RequestType %]>[% -%]
                                                [%- %] RequestRouterImp;
    typedef bcem_Aggregate                             RawRequest;
#else
[% END -%]
    // Core BAS Framework (Offline)
    typedef bassvc::RequestContext                     RequestContext;
    typedef bassvc::RequestRouter                      RequestRouter;
[% IF opts.noSchema -%]
    typedef bassvc::RequestRouterImp<bcema_Blob>       RequestRouterImp;
[% ELSE -%]
    typedef bassvc::RequestRouterImp<[% MSGNS %][% RequestType %]>[% -%]
                                       [%- %]          RequestRouterImp;
[% END -%]
    typedef bcema_Blob                                 RawRequest;
[% UNLESS opts.noSchema -%]
#endif
[% END -%]
};

}  // close namespace [% namespace %]
}  // close namespace BloombergLP
#endif

// GENERATED BY [% version %] [% timestamp %]
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., [% year.format %]
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
