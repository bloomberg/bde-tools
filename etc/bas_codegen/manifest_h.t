[% PROCESS svc_util.t -%]
// [% pkg %]_manifest.h   -*-C++-*-
#ifndef INCLUDED_[% PKG %]_MANIFEST
#define INCLUDED_[% PKG %]_MANIFEST

#ifndef INCLUDED_BDES_IDENT
#include <bdes_ident.h>
#endif
BDES_IDENT_RCSID([% pkg %]_manifest_h,"\$Id\$ \$CSID\$ \$CCId\$")
BDES_IDENT_PRAGMA_ONCE

//@PURPOSE: Provide metadata for the [% SERVICE %] service.
//
//@CLASSES:
// [% pkg %]::Manifest
//
//@AUTHOR: none
//
//@DESCRIPTION: This component provides metadata for the [% SERVICE %] service
// that can be loaded into an object of type 'bassvc::ServiceManifest'.

#ifndef INCLUDED_[% PKG %]_VERSION
#include <[% pkg %]_version.h>
#endif

namespace BloombergLP {
namespace [% namespace %] {

                               // ==============
                               // class Manifest
                               // ==============

class Manifest {
    // This class encapsulates metadata for the [% SERVICE %] service.

    // CLASS DATA
    static const char *d_name_p;            // service name
    static const char *d_description_p;     // brief service description
    static const int   d_majorVersion;      // service major version number
    static const int   d_minorVersion;      // service minor version number
    static const char *d_schemaNamespace_p; // service schema targetNamespace
    static const char *d_requestElement_p;  // top-level request element name
    static const char *d_responseElement_p; // top-level response element name

  public:
    // CLASS METHODS
    static const char *name();
        // Return the "name" attribute of this manifest.

    static const char *description();
        // Return the "description" attribute of this manifest.

    static int majorVersion();
        // Return the "major version" attribute of this manifest.

    static int minorVersion();
        // Return the "minor version" attribute of this manifest.

    static const char *schemaNamespace();
        // Return the "schema namespace" attribute of this manifest.

    static const char *requestElement();
        // Return the "requestlement" attribute of this manifest.

    static const char *responseElement();
        // Return the "response element" attribute of this manifest.
};

// ============================================================================
//                          INLINE FUNCTION DEFINITIONS
// ============================================================================

// CLASS METHODS
inline
const char *Manifest::name()
{
    return d_name_p;
}

inline
const char *Manifest::description()
{
    return d_description_p;
}

inline
int Manifest::majorVersion()
{
    return d_majorVersion;
}

inline
int Manifest::minorVersion()
{
    return d_minorVersion;
}

inline
const char *Manifest::schemaNamespace()
{
    return d_schemaNamespace_p;
}

inline
const char *Manifest::requestElement()
{
    return d_requestElement_p;
}

inline
const char *Manifest::responseElement()
{
    return d_responseElement_p;
}

}  // close namespace [% namespace %]
}  // close namespace BloombergLP
#endif

// GENERATED BY [% version %] [% timestamp %]
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., [% year.format %]
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------- END-OF-FILE --------------------------------
