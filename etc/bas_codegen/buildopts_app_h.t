[% PROCESS svc_util.t -%]
// [% pkg %]_buildopts.h   -*-C++-*-
#ifndef INCLUDED_[% PKG %]_BUILDOPTS
#define INCLUDED_[% PKG %]_BUILDOPTS

#ifndef lint
static char RCSid_[% pkg %]_buildopts_h[] = [% -%]
[%- %]"\$Id: \$ \$CCId: \$  \$CSID:  \$  \$SCMId:  \$";
#endif

//@PURPOSE: Provide a namespace for core framework class type aliases
//
//@CLASSES:
// [% namespace %]::BuildOpts: namespace for core framework class type aliases
//
//@AUTHOR: [% svc.author %]
//
//@DESCRIPTION: This component provides a namespace for type aliases for core
// framework classes selected according to various compiler macros.  These
// macros dictate how a BAS service should be deployed:
//..
//  BAS_NOBBENV - non-Bloomberg environment aware service
//
//  BAS_SVCLITE - Performance-optimized service
//..
// By default, services are aware of the Bloomberg environment, meaning that
// they can communicate via FastSend, and can attach to common areas and call
// various legacy functions such as comdb[2] accessors.  Defining the
// BAS_NOBBENV compiler flag results in a service which can do none of these
// things, and communicates only via TCP/IP.  Defining the BAS_SVCLITE compiler
// flag results in a service that is aware of the Bloomberg environment, but
// is optimized for performance.  In particular, such service trade speed for
// features available to generic BAS services such as the ability to process
// requests asynchronously, and the ability to execute multiple service
// instances in a single process.
//
// Note that the options BAS_NOBBENV and BAS_SVCLITE are mutually exclusive.
//
//@USAGE EXAMPLES
// The following examples illustrate how to choose build options by setting
// compiler flags, assuming the bas_codegen.pl generated plink makefile.
//
// The following command builds a non-Bloomberg environment aware service
//..
//  $ BAS_NOBBENV=yes plink service.mk
//..
// while a performance-enhanced service can be built using the command
//..
//  $ BAS_SVCLITE=yes plink service.mk
//..

#ifndef INCLUDED_[% PKG %]_VERSION
#include <[% pkg %]_version.h>
#endif

#ifndef BAS_SVCLITE
#ifndef BAS_NOBBENV
// Bloomberg Environment Aware
#ifndef INCLUDED_A_BASFS_SERVICEOFFLINE
#include <a_basfs_serviceoffline.h>
#endif
#else
// Non-Bloomberg Environment Aware
#ifndef INCLUDED_BASSVC_SERVICEOFFLINE
#include <bassvc_serviceoffline.h>
#endif
#endif
#ifndef INCLUDED_BASSVC_REQUESTROUTER
#include <bassvc_requestrouter.h>
#endif
#else
// Core BAS Lite Framework
#ifndef INCLUDED_A_BASSVCLT_SERVICEOFFLINE
#include <a_bassvclt_serviceoffline.h>
#endif
#ifndef INCLUDED_A_BASSVCLT_REQUESTROUTER
#include <a_bassvclt_requestrouter.h>
#endif
#endif

namespace BloombergLP {

namespace [% namespace %] {

                              // ================
                              // struct BuildOpts
                              // ================

struct BuildOpts {
    // This class provides a namespace for type aliases selected according to
    // various compiler macros.

#ifndef BAS_SVCLITE
#ifndef BAS_NOBBENV
    typedef a_basfs::ServiceOffline    ServiceOffline;
#else
    typedef bassvc::ServiceOffline     ServiceOffline;
#endif
    typedef bassvc::RequestRouter      RequestRouter;
#else
    typedef a_bassvclt::ServiceOffline ServiceOffline;
    typedef a_bassvclt::RequestRouter  RequestRouter;
#endif
};

}  // close namespace [% namespace %]
}  // close namespace BloombergLP
#endif

// GENERATED BY [% version %] [% timestamp %]
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., [% year.format %]
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
