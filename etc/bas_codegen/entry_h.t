[% PROCESS svc_util.t -%]
// [% pkg %]_entry.h   -*-C++-*-
#ifndef INCLUDED_[% PKG %]_ENTRY
#define INCLUDED_[% PKG %]_ENTRY

#ifndef INCLUDED_BDES_IDENT
#include <bdes_ident.h>
#endif
BDES_IDENT_RCSID([% pkg %]_entry_h,"\$Id\$ \$CSID\$ \$CCId\$")
BDES_IDENT_PRAGMA_ONCE

//@PURPOSE: Provide a [% SERVICE %] service entry point
//
//@CLASSES:
//
//@AUTHOR: [% svc.author %]
//
//@DESCRIPTION: This component provides entry points to the [% SERVICE %]
// service.  Two sets of entry point functions are provided: One is defined
// inside the package namespace and is used as the entry point from
// applications with a C++ main (e.g., a service deployed as a process).  The
// other set of entry point functions is defined in the enterprise namespace,
// and is provided explicitly for the purpose of initializing in-process
// services (i.e., baslets deployed in the Big).  This latter set of entry
// point functions provides demangled symbols that facilitate maintenance of
// Big code.

#ifndef INCLUDED_[% PKG %]_VERSION
#include <[% pkg %]_version.h>
#endif

#ifndef INCLUDED_[% PKG %]_BUILDOPTS
#include <[% pkg %]_buildopts.h>
#endif

#ifndef INCLUDED_BCEMA_SHAREDPTR
#include <bcema_sharedptr.h>
#endif

#ifndef INCLUDED_BSL_STRING
#include <bsl_string.h>
#define INCLUDED_BSL_STRING
#endif

namespace BloombergLP {

class bslma_Allocator;

class bcem_Aggregate;

namespace bassvc { class AggregateRequestRouter; }
namespace bassvc { class ServiceManifest; }

namespace [% namespace %] { class RequestRouter; }
namespace [% namespace %] {

                                // ============
                                // struct Entry
                                // ============

struct Entry {
    // This class provides a namespace for a set of entry points to the
    // [% SERVICE %] service.  The 'createService' methods are factory methods
    // that return a request router, used to process application-level
    // requests, and a manifest describing the service.  The 'createService'
    // methods take a 'bcem_Aggregate' configuration parameter, used to further
    // configure the service.

    static int createService(
            bcema_SharedPtr<RequestRouter>            *requestRouter,
            bassvc::ServiceManifest                   *manifest,
            const bsl::string&                         serviceName,
            const bcem_Aggregate&                      configuration,
            bslma_Allocator                           *basicAllocator = 0);
        // Load into the specified 'requestRouter' a pointer to an allocated
        // [% SERVICE %] 'RequestRouter' object configured with the specified
        // 'serviceName' and 'configuration'.  If the specified 'manifest' is
        // not 0, load into 'manifest' a description of the service.
        // Optionally specify a 'basicAllocator', used to supply memory.  If
        // 'basicAllocator' is 0, the currently installed default allocator is
        // used.  Return 0 on success, and a non-zero value otherwise.

    static int createService(
            bcema_SharedPtr<BuildOpts::RequestRouter> *requestRouter,
            bassvc::ServiceManifest                   *manifest,
            const bcem_Aggregate&                      configuration,
            bslma_Allocator                           *basicAllocator = 0);
        // Load into the specified 'requestRouter' a pointer to an allocated
        // [% SERVICE %] 'RequestRouter' object configured with the specified
        // 'configuration'.  If the specified 'manifest' is not 0, load into
        // 'manifest' a description of the service.  Optionally specify a
        // 'basicAllocator', used to supply memory.  If 'basicAllocator' is 0,
        // the currently installed default allocator is used.  Return 0 on
        // success, and a non-zero value otherwise.
};

}  // close namespace [% namespace %]

int [% pkg %]_Entry__createService(
        bcema_SharedPtr<bassvc::AggregateRequestRouter> *requestRouter,
        bassvc::ServiceManifest                         *manifest,
        const bcem_Aggregate&                            configuration,
        bslma_Allocator                                 *basicAllocator = 0);
    // Load into the specified 'requestRouter' a pointer to an allocated
    // [% SERVICE %] 'RequestRouter' object configured with the specified
    // 'configuration' and 'serviceName', used to identify instance-specific
    // metrics and elements of the 'configuration'.  If the specified
    // 'manifest' is not 0, load into 'manifest' a description of the service.
    // Optionally specify a 'basicAllocator', used to supply memory.  If
    // 'basicAllocator' is 0, the currently installed default allocator is
    // used.  Return 0 on success, and a non-zero value otherwise.

}  // close namespace BloombergLP
#endif

// GENERATED BY [% version %] [% timestamp %]
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., [% year.format %]
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------- END-OF-FILE --------------------------------
