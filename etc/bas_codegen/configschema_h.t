[% PROCESS configschema_util.t -%]
// [% pkg %]_configschema.h   -*-C++-*-   [% -%]
[%- %]GENERATED FILE -- DO NOT EDIT
#ifndef INCLUDED_[% PKG %]_CONFIGSCHEMA
#define INCLUDED_[% PKG %]_CONFIGSCHEMA

#ifndef INCLUDED_BDES_IDENT
#include <bdes_ident.h>
#endif
BDES_IDENT_RCSID([% pkg %]_configschema_h,"\$Id\$ \$CSID\$ \$CCId\$")
BDES_IDENT_PRAGMA_ONCE

//@PURPOSE: Provide the [% SERVICE %] service configuration schema
//
//@CLASSES:
// [% namespace %]::ConfigSchema: the [% SERVICE %] configuration schema
//
//@AUTHOR: [% svc.author %]
//
//@DESCRIPTION: This component provides a namespace for the [% SERVICE %]
// service configuration schema.  This in-core representation of the schema
// is used to validate XML configuration data used to initialize the service.

#ifndef INCLUDED_BSL_OSTREAM
#include <bsl_ostream.h>
#define INCLUDED_BSL_OSTREAM
#endif

namespace BloombergLP {
namespace [% namespace %] {

struct ConfigSchema {
    // Provide a namespace for the [% SERVICE %] service configuration schema.

    static const char TEXT[];    // service configuration schema
};

// FREE OPERATORS
bsl::ostream& operator<<(bsl::ostream& stream, const ConfigSchema& schema);
    // Write the specified 'schema' to the specified 'stream', and return
    // a modifiable reference to 'stream'.

}  // close namespace [% namespace %]

// FREE OPERATORS
inline
bsl::ostream& [% namespace %]::operator<<(
    bsl::ostream& stream,
    const [% namespace %]::ConfigSchema& schema)
{
    return stream << schema.TEXT;
}

}  // close namespace BloombergLP
#endif

// GENERATED BY [% version %] [% timestamp %]
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., [% year.format %]
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
